"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceImportsFromStaticInJsCode = void 0;
var ftlValuesGlobalName_1 = require("../ftlValuesGlobalName");
var assert_1 = require("tsafe/assert");
var is_1 = require("tsafe/is");
var Reflect_1 = require("tsafe/Reflect");
{
    var buildOptions = (0, Reflect_1.Reflect)();
    (0, assert_1.assert)(!(0, is_1.is)(buildOptions));
    (0, assert_1.assert)();
}
function replaceImportsFromStaticInJsCode(params) {
    /*
    NOTE:

    When we have urlOrigin defined it means that
    we are building with --external-assets
    so we have to make sur that the fixed js code will run
    inside and outside keycloak.

    When urlOrigin isn't defined we can assume the fixedJsCode
    will always run in keycloak context.
    */
    var _a;
    var jsCode = params.jsCode, buildOptions = params.buildOptions;
    var getReplaceArgs = function (language) { return [
        new RegExp("([a-zA-Z_]+)\\.([a-zA-Z]+)=function\\(([a-zA-Z]+)\\){return\"static\\/".concat(language, "\\/\""), "g"),
        function () {
            var _a = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _a[_i] = arguments[_i];
            }
            var _b = __read(_a, 4), n = _b[1], u = _b[2], e = _b[3];
            return "\n\t\t\t".concat(n, "[(function(){\n                var pd= Object.getOwnPropertyDescriptor(").concat(n, ", \"p\");\n                if( pd === undefined || pd.configurable ){\n                ").concat(buildOptions.isStandalone
                ? "\n                        Object.defineProperty(".concat(n, ", \"p\", {\n                            get: function() { return window.").concat(ftlValuesGlobalName_1.ftlValuesGlobalName, ".url.resourcesPath; },\n                            set: function (){}\n                        });\n                    ")
                : "\n                    var p= \"\";\n                    Object.defineProperty(".concat(n, ", \"p\", {\n                        get: function() { return \"").concat(ftlValuesGlobalName_1.ftlValuesGlobalName, "\" in window ? \"").concat(buildOptions.urlOrigin, "/\" : p; },\n                        set: function (value){ p = value;}\n                    });\n                    "), "\n                }\n\t\t\t\treturn \"").concat(u, "\";\n\t\t\t})()] = function(").concat(e, ") { return \"").concat(buildOptions.isStandalone ? "/build/" : "", "static/").concat(language, "/\"");
        }
    ]; };
    var fixedJsCode = (_a = jsCode
        .replace.apply(jsCode, __spreadArray([], __read(getReplaceArgs("js")), false)))
        .replace.apply(_a, __spreadArray([], __read(getReplaceArgs("css")), false)).replace(/([a-zA-Z]+\.[a-zA-Z]+)\+"static\//g, function () {
        var _a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _a[_i] = arguments[_i];
        }
        var _b = __read(_a, 2), group = _b[1];
        return buildOptions.isStandalone
            ? "window.".concat(ftlValuesGlobalName_1.ftlValuesGlobalName, ".url.resourcesPath + \"/build/static/")
            : "(\"".concat(ftlValuesGlobalName_1.ftlValuesGlobalName, "\" in window ? \"").concat(buildOptions.urlOrigin, "/\" : ").concat(group, ") + \"static/");
    })
        //TODO: Write a test case for this
        .replace(/".chunk.css",([a-zA-Z])+=([a-zA-Z]+\.[a-zA-Z]+)\+([a-zA-Z]+),/, function () {
        var _a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _a[_i] = arguments[_i];
        }
        var _b = __read(_a, 4), group1 = _b[1], group2 = _b[2], group3 = _b[3];
        return buildOptions.isStandalone
            ? "\".chunk.css\",".concat(group1, " = window.").concat(ftlValuesGlobalName_1.ftlValuesGlobalName, ".url.resourcesPath + \"/build/\" + ").concat(group3, ",")
            : "\".chunk.css\",".concat(group1, " = (\"").concat(ftlValuesGlobalName_1.ftlValuesGlobalName, "\" in window ? \"").concat(buildOptions.urlOrigin, "/\" : ").concat(group2, ") + ").concat(group3, ",");
    });
    return { fixedJsCode: fixedJsCode };
}
exports.replaceImportsFromStaticInJsCode = replaceImportsFromStaticInJsCode;
//# sourceMappingURL=replaceImportsFromStaticInJsCode.js.map