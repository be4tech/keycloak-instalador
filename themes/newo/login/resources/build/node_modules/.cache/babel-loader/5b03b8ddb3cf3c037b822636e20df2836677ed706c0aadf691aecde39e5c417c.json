{"ast":null,"code":"import { kcContext } from \"./kcContext\";\nimport { retrieveParamFromUrl, addParamToUrl, updateSearchBarUrl } from \"powerhooks/tools/urlSearchParams\";\nimport { capitalize } from \"tsafe/capitalize\";\nexport const {\n  foo,\n  addFooToQueryParams\n} = (() => {\n  const queryParamName = \"foo\";\n  const value = (() => {\n    const unparsedValue = read({\n      queryParamName\n    });\n    if (unparsedValue === undefined) {\n      return undefined;\n    }\n    return JSON.parse(unparsedValue);\n  })();\n  function addToUrlQueryParams(params) {\n    const {\n      url,\n      value\n    } = params;\n    return addParamToUrl({\n      url,\n      \"name\": queryParamName,\n      \"value\": JSON.stringify(value)\n    }).newUrl;\n  }\n  const out = {\n    [queryParamName]: value,\n    [`add${capitalize(queryParamName)}ToQueryParams`]: addToUrlQueryParams\n  };\n  return out;\n})();\nexport const {\n  bar,\n  addBarToQueryParams\n} = (() => {\n  const queryParamName = \"bar\";\n  const value = (() => {\n    const unparsedValue = read({\n      queryParamName\n    });\n    if (unparsedValue === undefined) {\n      return undefined;\n    }\n    return JSON.parse(unparsedValue);\n  })();\n  function addToUrlQueryParams(params) {\n    const {\n      url,\n      value\n    } = params;\n    return addParamToUrl({\n      url,\n      \"name\": queryParamName,\n      \"value\": JSON.stringify(value)\n    }).newUrl;\n  }\n  const out = {\n    [queryParamName]: value,\n    [`add${capitalize(queryParamName)}ToQueryParams`]: addToUrlQueryParams\n  };\n  return out;\n})();\nfunction read(params) {\n  if (kcContext === undefined || process.env.NODE_ENV !== \"production\") {\n    //NOTE: We do something only if we are really in Keycloak\n    return undefined;\n  }\n  const {\n    queryParamName\n  } = params;\n  read_from_url: {\n    const result = retrieveParamFromUrl({\n      \"url\": window.location.href,\n      \"name\": queryParamName\n    });\n    if (!result.wasPresent) {\n      break read_from_url;\n    }\n    const {\n      newUrl,\n      value: serializedValue\n    } = result;\n    updateSearchBarUrl(newUrl);\n    localStorage.setItem(queryParamName, serializedValue);\n    return serializedValue;\n  }\n\n  //Reading from local storage\n  const serializedValue = localStorage.getItem(queryParamName);\n  if (serializedValue === null) {\n    throw new Error(`Missing ${queryParamName} in URL when redirecting to login page`);\n  }\n  return serializedValue;\n}","map":{"version":3,"names":["kcContext","retrieveParamFromUrl","addParamToUrl","updateSearchBarUrl","capitalize","foo","addFooToQueryParams","queryParamName","value","unparsedValue","read","undefined","JSON","parse","addToUrlQueryParams","params","url","stringify","newUrl","out","bar","addBarToQueryParams","process","env","NODE_ENV","read_from_url","result","window","location","href","wasPresent","serializedValue","localStorage","setItem","getItem","Error"],"sources":["/Users/user/NewoDev/keycloakify-starter/src/keycloak-theme/login/valuesTransferredOverUrl.ts"],"sourcesContent":["import { kcContext } from \"./kcContext\";\nimport {\n    retrieveParamFromUrl,\n    addParamToUrl,\n    updateSearchBarUrl\n} from \"powerhooks/tools/urlSearchParams\";\nimport { capitalize } from \"tsafe/capitalize\";\n\nexport const { foo, addFooToQueryParams } = (() => {\n    const queryParamName = \"foo\";\n\n    type Type = { foo: number; };\n\n    const value = (()=> {\n\n        const unparsedValue = read({ queryParamName });\n\n        if( unparsedValue === undefined ){\n            return undefined;\n        }\n\n        return JSON.parse(unparsedValue) as Type;\n\n    })();\n\n    function addToUrlQueryParams(params: {\n        url: string;\n        value: Type;\n    }): string {\n        const { url, value } = params;\n\n        return addParamToUrl({\n            url,\n            \"name\": queryParamName,\n            \"value\": JSON.stringify(value)\n        }).newUrl;\n    }\n\n    const out = {\n        [queryParamName]: value,\n        [`add${capitalize(queryParamName)}ToQueryParams` as const]: addToUrlQueryParams\n    } as const;\n\n    return out;\n})();\n\nexport const { bar, addBarToQueryParams } = (() => {\n    const queryParamName = \"bar\";\n\n    type Type = string;\n\n    const value = (()=> {\n\n        const unparsedValue = read({ queryParamName });\n\n        if( unparsedValue === undefined ){\n            return undefined;\n        }\n\n        return JSON.parse(unparsedValue) as Type;\n\n    })();\n\n    function addToUrlQueryParams(params: {\n        url: string;\n        value: Type;\n    }): string {\n        const { url, value } = params;\n\n        return addParamToUrl({\n            url,\n            \"name\": queryParamName,\n            \"value\": JSON.stringify(value)\n        }).newUrl;\n    }\n\n    const out = {\n        [queryParamName]: value,\n        [`add${capitalize(queryParamName)}ToQueryParams` as const]: addToUrlQueryParams\n    } as const;\n\n    return out;\n})();\n\n\nfunction read(params: { queryParamName: string }): string | undefined {\n    if (kcContext === undefined || process.env.NODE_ENV !== \"production\") {\n        //NOTE: We do something only if we are really in Keycloak\n        return undefined;\n    }\n\n    const { queryParamName } = params;\n\n    read_from_url: {\n        const result = retrieveParamFromUrl({\n            \"url\": window.location.href,\n            \"name\": queryParamName\n        });\n\n        if (!result.wasPresent) {\n            break read_from_url;\n        }\n\n        const { newUrl, value: serializedValue } = result;\n\n        updateSearchBarUrl(newUrl);\n\n        localStorage.setItem(queryParamName, serializedValue);\n\n        return serializedValue;\n    }\n\n    //Reading from local storage\n    const serializedValue = localStorage.getItem(queryParamName);\n\n    if (serializedValue === null) {\n        throw new Error(\n            `Missing ${queryParamName} in URL when redirecting to login page`\n        );\n    }\n\n    return serializedValue;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}