{"ast":null,"code":"import { createGetKcContext } from \"keycloakify/login\";\n//NOTE: In most of the cases you do not need to overload the KcContext, you can \n// just call createGetKcContext(...) without type arguments.  \n// You want to overload the KcContext only if:  \n// - You have custom plugins that add some values to the context (like https://github.com/micedre/keycloak-mail-whitelisting that adds authorizedMailDomains)\n// - You want to add support for extra pages that are not yey featured by default, see: https://docs.keycloakify.dev/contributing#adding-support-for-a-new-page\nexport const {\n  getKcContext\n} = createGetKcContext({\n  mockData: [{\n    pageId: \"login.ftl\",\n    locale: {\n      //When we test the login page we do it in french\n      currentLanguageTag: \"fr\"\n    }\n    //Uncomment the following line for hiding the Alert message\n    //\"message\": undefined\n    //Uncomment the following line for showing an Error message\n    //message: { type: \"error\", summary: \"This is an error\" }\n  }, {\n    pageId: \"my-extra-page-2.ftl\",\n    someCustomValue: \"foo bar baz\"\n  }, {\n    //NOTE: You will either use register.ftl (legacy) or register-user-profile.ftl, not both\n    pageId: \"register-user-profile.ftl\",\n    locale: {\n      currentLanguageTag: \"fr\"\n    },\n    profile: {\n      attributes: [{\n        validators: {\n          pattern: {\n            pattern: \"^[a-zA-Z0-9]+$\",\n            \"ignore.empty.value\": true,\n            // eslint-disable-next-line no-template-curly-in-string\n            \"error-message\": \"${alphanumericalCharsOnly}\"\n          }\n        },\n        //NOTE: To override the default mock value\n        value: undefined,\n        name: \"username\"\n      }, {\n        validators: {\n          options: {\n            options: [\"male\", \"female\", \"non-binary\", \"transgender\", \"intersex\", \"non_communicated\"]\n          }\n        },\n        // eslint-disable-next-line no-template-curly-in-string\n        displayName: \"${gender}\",\n        annotations: {},\n        required: true,\n        groupAnnotations: {},\n        readOnly: false,\n        name: \"gender\"\n      }]\n    }\n  }, {\n    pageId: \"register.ftl\",\n    authorizedMailDomains: [\"example.com\", \"another-example.com\", \"*.yet-another-example.com\", \"*.example.com\", \"hello-world.com\"],\n    // Simulate we got an error with the email field\n    messagesPerField: {\n      printIfExists: (fieldName, className) => {\n        console.log({\n          fieldName\n        });\n        return fieldName === \"email\" ? className : undefined;\n      },\n      existsError: fieldName => fieldName === \"email\",\n      get: fieldName => `Fake error for ${fieldName}`,\n      exists: fieldName => fieldName === \"email\"\n    }\n  }]\n});\nexport const {\n  kcContext\n} = getKcContext({\n  // Uncomment to test the login page for development.\n  //mockPageId: \"login.ftl\",\n});","map":{"version":3,"names":["createGetKcContext","getKcContext","mockData","pageId","locale","currentLanguageTag","someCustomValue","profile","attributes","validators","pattern","value","undefined","name","options","displayName","annotations","required","groupAnnotations","readOnly","authorizedMailDomains","messagesPerField","printIfExists","fieldName","className","console","log","existsError","get","exists","kcContext"],"sources":["/Users/user/NewoDev/keycloakify-starter/src/keycloak-theme/login/kcContext.ts"],"sourcesContent":["import { createGetKcContext } from \"keycloakify/login\";\n\nexport type KcContextExtension =\n\t| { pageId: \"my-extra-page-1.ftl\"; }\n\t| { pageId: \"my-extra-page-2.ftl\"; someCustomValue: string; }\n\t// NOTE: register.ftl is deprecated in favor of register-user-profile.ftl\n\t// but let's say we use it anyway and have this plugin enabled: https://github.com/micedre/keycloak-mail-whitelisting\n\t// keycloak-mail-whitelisting define the non standard ftl global authorizedMailDomains, we declare it here.\n\t| { pageId: \"register.ftl\"; authorizedMailDomains: string[]; };\n\n//NOTE: In most of the cases you do not need to overload the KcContext, you can \n// just call createGetKcContext(...) without type arguments.  \n// You want to overload the KcContext only if:  \n// - You have custom plugins that add some values to the context (like https://github.com/micedre/keycloak-mail-whitelisting that adds authorizedMailDomains)\n// - You want to add support for extra pages that are not yey featured by default, see: https://docs.keycloakify.dev/contributing#adding-support-for-a-new-page\nexport const { getKcContext } = createGetKcContext<KcContextExtension>({\n\tmockData: [\n\t\t{\n\t\t\tpageId: \"login.ftl\",\n\t\t\tlocale: {\n\t\t\t\t//When we test the login page we do it in french\n\t\t\t\tcurrentLanguageTag: \"fr\",\n\t\t\t},\n\t\t\t//Uncomment the following line for hiding the Alert message\n\t\t\t//\"message\": undefined\n\t\t\t//Uncomment the following line for showing an Error message\n\t\t\t//message: { type: \"error\", summary: \"This is an error\" }\n\t\t},\n\t\t{\n\t\t\tpageId: \"my-extra-page-2.ftl\",\n\t\t\tsomeCustomValue: \"foo bar baz\"\n\t\t},\n\t\t{\n\t\t\t//NOTE: You will either use register.ftl (legacy) or register-user-profile.ftl, not both\n\t\t\tpageId: \"register-user-profile.ftl\",\n\t\t\tlocale: {\n\t\t\t\tcurrentLanguageTag: \"fr\"\n\t\t\t},\n\t\t\tprofile: {\n\t\t\t\tattributes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalidators: {\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\tpattern: \"^[a-zA-Z0-9]+$\",\n\t\t\t\t\t\t\t\t\"ignore.empty.value\": true,\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-template-curly-in-string\n\t\t\t\t\t\t\t\t\"error-message\": \"${alphanumericalCharsOnly}\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t//NOTE: To override the default mock value\n\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\tname: \"username\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalidators: {\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\toptions: [\"male\", \"female\", \"non-binary\", \"transgender\", \"intersex\", \"non_communicated\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// eslint-disable-next-line no-template-curly-in-string\n\t\t\t\t\t\tdisplayName: \"${gender}\",\n\t\t\t\t\t\tannotations: {},\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tgroupAnnotations: {},\n\t\t\t\t\t\treadOnly: false,\n\t\t\t\t\t\tname: \"gender\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpageId: \"register.ftl\",\n\t\t\tauthorizedMailDomains: [\n\t\t\t\t\"example.com\",\n\t\t\t\t\"another-example.com\",\n\t\t\t\t\"*.yet-another-example.com\",\n\t\t\t\t\"*.example.com\",\n\t\t\t\t\"hello-world.com\"\n\t\t\t],\n\t\t\t// Simulate we got an error with the email field\n\t\t\tmessagesPerField: {\n\t\t\t\tprintIfExists: <T>(fieldName: string, className: T) => { console.log({ fieldName }); return fieldName === \"email\" ? className : undefined; },\n\t\t\t\texistsError: (fieldName: string) => fieldName === \"email\",\n\t\t\t\tget: (fieldName: string) => `Fake error for ${fieldName}`,\n\t\t\t\texists: (fieldName: string) => fieldName === \"email\"\n\t\t\t},\n\n\t\t}\n\t]\n});\n\nexport const { kcContext } = getKcContext({\n\t// Uncomment to test the login page for development.\n\t//mockPageId: \"login.ftl\",\n});\n\n\nexport type KcContext = NonNullable<ReturnType<typeof getKcContext>[\"kcContext\"]>;"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,mBAAmB;AAUtD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM;EAAEC;AAAa,CAAC,GAAGD,kBAAkB,CAAqB;EACtEE,QAAQ,EAAE,CACT;IACCC,MAAM,EAAE,WAAW;IACnBC,MAAM,EAAE;MACP;MACAC,kBAAkB,EAAE;IACrB;IACA;IACA;IACA;IACA;EACD,CAAC,EACD;IACCF,MAAM,EAAE,qBAAqB;IAC7BG,eAAe,EAAE;EAClB,CAAC,EACD;IACC;IACAH,MAAM,EAAE,2BAA2B;IACnCC,MAAM,EAAE;MACPC,kBAAkB,EAAE;IACrB,CAAC;IACDE,OAAO,EAAE;MACRC,UAAU,EAAE,CACX;QACCC,UAAU,EAAE;UACXC,OAAO,EAAE;YACRA,OAAO,EAAE,gBAAgB;YACzB,oBAAoB,EAAE,IAAI;YAC1B;YACA,eAAe,EAAE;UAClB;QACD,CAAC;QACD;QACAC,KAAK,EAAEC,SAAS;QAChBC,IAAI,EAAE;MACP,CAAC,EACD;QACCJ,UAAU,EAAE;UACXK,OAAO,EAAE;YACRA,OAAO,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,UAAU,EAAE,kBAAkB;UACxF;QACD,CAAC;QACD;QACAC,WAAW,EAAE,WAAW;QACxBC,WAAW,EAAE,CAAC,CAAC;QACfC,QAAQ,EAAE,IAAI;QACdC,gBAAgB,EAAE,CAAC,CAAC;QACpBC,QAAQ,EAAE,KAAK;QACfN,IAAI,EAAE;MACP,CAAC;IAEH;EACD,CAAC,EACD;IACCV,MAAM,EAAE,cAAc;IACtBiB,qBAAqB,EAAE,CACtB,aAAa,EACb,qBAAqB,EACrB,2BAA2B,EAC3B,eAAe,EACf,iBAAiB,CACjB;IACD;IACAC,gBAAgB,EAAE;MACjBC,aAAa,EAAEA,CAAIC,SAAiB,EAAEC,SAAY,KAAK;QAAEC,OAAO,CAACC,GAAG,CAAC;UAAEH;QAAU,CAAC,CAAC;QAAE,OAAOA,SAAS,KAAK,OAAO,GAAGC,SAAS,GAAGZ,SAAS;MAAE,CAAC;MAC5Ie,WAAW,EAAGJ,SAAiB,IAAKA,SAAS,KAAK,OAAO;MACzDK,GAAG,EAAGL,SAAiB,IAAM,kBAAiBA,SAAU,EAAC;MACzDM,MAAM,EAAGN,SAAiB,IAAKA,SAAS,KAAK;IAC9C;EAED,CAAC;AAEH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEO;AAAU,CAAC,GAAG7B,YAAY,CAAC;EACzC;EACA;AAAA,CACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}