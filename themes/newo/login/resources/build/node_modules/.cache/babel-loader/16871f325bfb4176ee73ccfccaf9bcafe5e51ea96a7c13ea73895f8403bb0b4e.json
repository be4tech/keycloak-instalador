{"ast":null,"code":"import { assert } from \"tsafe/assert\";\nimport { is } from \"tsafe/is\";\nimport { deepClone } from \"./deepClone\";\n//Warning: Be mindful that because of array this is not idempotent.\nexport function deepAssign(params) {\n  const {\n    target\n  } = params;\n  const source = deepClone(params.source);\n  Object.keys(source).forEach(key => {\n    var dereferencedSource = source[key];\n    if (target[key] === undefined || dereferencedSource instanceof Function || !(dereferencedSource instanceof Object)) {\n      Object.defineProperty(target, key, {\n        \"enumerable\": true,\n        \"writable\": true,\n        \"configurable\": true,\n        \"value\": dereferencedSource\n      });\n      return;\n    }\n    const dereferencedTarget = target[key];\n    if (dereferencedSource instanceof Array) {\n      assert(is(dereferencedTarget));\n      assert(is(dereferencedSource));\n      dereferencedSource.forEach(entry => dereferencedTarget.push(entry));\n      return;\n    }\n    assert(is(dereferencedTarget));\n    assert(is(dereferencedSource));\n    deepAssign({\n      \"target\": dereferencedTarget,\n      \"source\": dereferencedSource\n    });\n  });\n}","map":{"version":3,"names":["assert","is","deepClone","deepAssign","params","target","source","Object","keys","forEach","key","dereferencedSource","undefined","Function","defineProperty","dereferencedTarget","Array","entry","push"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/tools/deepAssign.ts"],"sourcesContent":["import { assert } from \"tsafe/assert\";\nimport { is } from \"tsafe/is\";\nimport { deepClone } from \"./deepClone\";\n\n//Warning: Be mindful that because of array this is not idempotent.\nexport function deepAssign(params: { target: Record<string, unknown>; source: Record<string, unknown> }) {\n    const { target } = params;\n\n    const source = deepClone(params.source);\n\n    Object.keys(source).forEach(key => {\n        var dereferencedSource = source[key];\n\n        if (target[key] === undefined || dereferencedSource instanceof Function || !(dereferencedSource instanceof Object)) {\n            Object.defineProperty(target, key, {\n                \"enumerable\": true,\n                \"writable\": true,\n                \"configurable\": true,\n                \"value\": dereferencedSource\n            });\n\n            return;\n        }\n\n        const dereferencedTarget = target[key];\n\n        if (dereferencedSource instanceof Array) {\n            assert(is<unknown[]>(dereferencedTarget));\n            assert(is<unknown[]>(dereferencedSource));\n\n            dereferencedSource.forEach(entry => dereferencedTarget.push(entry));\n\n            return;\n        }\n\n        assert(is<Record<string, unknown>>(dereferencedTarget));\n        assert(is<Record<string, unknown>>(dereferencedSource));\n\n        deepAssign({\n            \"target\": dereferencedTarget,\n            \"source\": dereferencedSource\n        });\n    });\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;AACrC,SAASC,EAAE,QAAQ,UAAU;AAC7B,SAASC,SAAS,QAAQ,aAAa;AAEvC;AACA,OAAM,SAAUC,UAAUA,CAACC,MAA4E;EACnG,MAAM;IAAEC;EAAM,CAAE,GAAGD,MAAM;EAEzB,MAAME,MAAM,GAAGJ,SAAS,CAACE,MAAM,CAACE,MAAM,CAAC;EAEvCC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAACC,GAAG,IAAG;IAC9B,IAAIC,kBAAkB,GAAGL,MAAM,CAACI,GAAG,CAAC;IAEpC,IAAIL,MAAM,CAACK,GAAG,CAAC,KAAKE,SAAS,IAAID,kBAAkB,YAAYE,QAAQ,IAAI,EAAEF,kBAAkB,YAAYJ,MAAM,CAAC,EAAE;MAChHA,MAAM,CAACO,cAAc,CAACT,MAAM,EAAEK,GAAG,EAAE;QAC/B,YAAY,EAAE,IAAI;QAClB,UAAU,EAAE,IAAI;QAChB,cAAc,EAAE,IAAI;QACpB,OAAO,EAAEC;OACZ,CAAC;MAEF;;IAGJ,MAAMI,kBAAkB,GAAGV,MAAM,CAACK,GAAG,CAAC;IAEtC,IAAIC,kBAAkB,YAAYK,KAAK,EAAE;MACrChB,MAAM,CAACC,EAAE,CAAYc,kBAAkB,CAAC,CAAC;MACzCf,MAAM,CAACC,EAAE,CAAYU,kBAAkB,CAAC,CAAC;MAEzCA,kBAAkB,CAACF,OAAO,CAACQ,KAAK,IAAIF,kBAAkB,CAACG,IAAI,CAACD,KAAK,CAAC,CAAC;MAEnE;;IAGJjB,MAAM,CAACC,EAAE,CAA0Bc,kBAAkB,CAAC,CAAC;IACvDf,MAAM,CAACC,EAAE,CAA0BU,kBAAkB,CAAC,CAAC;IAEvDR,UAAU,CAAC;MACP,QAAQ,EAAEY,kBAAkB;MAC5B,QAAQ,EAAEJ;KACb,CAAC;EACN,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}