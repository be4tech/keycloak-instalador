{"ast":null,"code":"var _jsxFileName = \"/Users/user/NewoDev/keycloakify-starter/src/keycloak-theme/login/pages/Login.tsx\",\n  _s = $RefreshSig$();\n// ejected using 'npx eject-keycloak-page'\nimport { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Login(props) {\n  _s();\n  const {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    Template,\n    classes\n  } = props;\n  const {\n    getClassName\n  } = useGetClassName({\n    doUseDefaultCss,\n    classes\n  });\n  const {\n    social,\n    realm,\n    url,\n    usernameEditDisabled,\n    login,\n    auth,\n    registrationDisabled\n  } = kcContext;\n  const {\n    msg,\n    msgStr\n  } = i18n;\n  const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n  const onSubmit = useConstCallback(e => {\n    var _formElement$querySel;\n    e.preventDefault();\n    setIsLoginButtonDisabled(true);\n    const formElement = e.target;\n\n    //NOTE: Even if we login with email Keycloak expect username and password in\n    //the POST request.\n    (_formElement$querySel = formElement.querySelector(\"input[name='email']\")) === null || _formElement$querySel === void 0 ? void 0 : _formElement$querySel.setAttribute(\"name\", \"username\");\n    formElement.submit();\n  });\n  return /*#__PURE__*/_jsxDEV(Template, {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    classes,\n    displayInfo: social.displayInfo,\n    displayWide: realm.password && social.providers !== undefined,\n    headerNode: msg(\"doLogIn\"),\n    infoNode: realm.password && realm.registrationAllowed && !registrationDisabled && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"kc-registration\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [msg(\"noAccount\"), /*#__PURE__*/_jsxDEV(\"a\", {\n          tabIndex: 6,\n          href: url.registrationUrl,\n          children: msg(\"doRegister\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"kc-form\",\n      className: clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\")),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"kc-form-wrapper\",\n        className: clsx(realm.password && social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]),\n        children: realm.password && /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"kc-form-login\",\n          onSubmit: onSubmit,\n          action: url.loginAction,\n          method: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: getClassName(\"kcFormGroupClass\"),\n            children: (() => {\n              var _login$username;\n              const label = !realm.loginWithEmailAllowed ? \"username\" : realm.registrationEmailAsUsername ? \"email\" : \"usernameOrEmail\";\n              const autoCompleteHelper = label === \"usernameOrEmail\" ? \"username\" : label;\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: autoCompleteHelper,\n                  className: getClassName(\"kcLabelClass\"),\n                  children: msg(label)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  tabIndex: 1,\n                  id: autoCompleteHelper,\n                  className: getClassName(\"kcInputClass\")\n                  //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                  //the browser how to pre fill the form but before submit we put it back\n                  //to username because it is what keycloak expects.\n                  ,\n                  name: autoCompleteHelper,\n                  defaultValue: (_login$username = login.username) !== null && _login$username !== void 0 ? _login$username : \"\",\n                  type: \"text\",\n                  ...(usernameEditDisabled ? {\n                    \"disabled\": true\n                  } : {\n                    \"autoFocus\": true,\n                    \"autoComplete\": \"off\"\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true);\n            })()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: getClassName(\"kcFormGroupClass\"),\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              className: getClassName(\"kcLabelClass\"),\n              children: msg(\"password\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              tabIndex: 2,\n              id: \"password\",\n              className: getClassName(\"kcInputClass\"),\n              name: \"password\",\n              type: \"password\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\")),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"kc-form-options\",\n              children: realm.rememberMe && !usernameEditDisabled && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    tabIndex: 3,\n                    id: \"rememberMe\",\n                    name: \"rememberMe\",\n                    type: \"checkbox\",\n                    ...(login.rememberMe ? {\n                      \"checked\": true\n                    } : {})\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 49\n                  }, this), msg(\"rememberMe\")]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: getClassName(\"kcFormOptionsWrapperClass\"),\n              children: realm.resetPasswordAllowed && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  tabIndex: 5,\n                  href: url.loginResetCredentialsUrl,\n                  children: msg(\"doForgotPassword\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"kc-form-buttons\",\n            className: getClassName(\"kcFormGroupClass\"),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"hidden\",\n              id: \"id-hidden-input\",\n              name: \"credentialId\",\n              ...((auth === null || auth === void 0 ? void 0 : auth.selectedCredential) !== undefined ? {\n                \"value\": auth.selectedCredential\n              } : {})\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              tabIndex: 4,\n              className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonBlockClass\"), getClassName(\"kcButtonLargeClass\")),\n              name: \"login\",\n              id: \"kc-login\",\n              type: \"submit\",\n              value: msgStr(\"doLogIn\"),\n              disabled: isLoginButtonDisabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), realm.password && social.providers !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"kc-social-providers\",\n        className: clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")),\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: clsx(getClassName(\"kcFormSocialAccountListClass\"), social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")),\n          children: social.providers.map(p => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: getClassName(\"kcFormSocialAccountListLinkClass\"),\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: p.loginUrl,\n              id: `zocial-${p.alias}`,\n              className: clsx(\"zocial\", p.providerId),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: p.displayName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }, this)\n          }, p.providerId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(Login, \"qTVD2mfqmkmp+H4bJheQxf/L4XQ=\", false, function () {\n  return [useGetClassName, useConstCallback];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","clsx","useConstCallback","useGetClassName","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","props","_s","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","social","realm","url","usernameEditDisabled","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","providers","undefined","headerNode","infoNode","registrationAllowed","id","children","tabIndex","href","registrationUrl","fileName","_jsxFileName","lineNumber","columnNumber","className","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","name","defaultValue","username","type","autoComplete","rememberMe","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","alias","providerId","displayName","_c","$RefreshReg$"],"sources":["/Users/user/NewoDev/keycloakify-starter/src/keycloak-theme/login/pages/Login.tsx"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                            social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {(() => {\n                                    const label = !realm.loginWithEmailAllowed\n                                        ? \"username\"\n                                        : realm.registrationEmailAsUsername\n                                        ? \"email\"\n                                        : \"usernameOrEmail\";\n\n                                    const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                    return (\n                                        <>\n                                            <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\n                                                {msg(label)}\n                                            </label>\n                                            <input\n                                                tabIndex={1}\n                                                id={autoCompleteHelper}\n                                                className={getClassName(\"kcInputClass\")}\n                                                //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                //the browser how to pre fill the form but before submit we put it back\n                                                //to username because it is what keycloak expects.\n                                                name={autoCompleteHelper}\n                                                defaultValue={login.username ?? \"\"}\n                                                type=\"text\"\n                                                {...(usernameEditDisabled\n                                                    ? { \"disabled\": true }\n                                                    : {\n                                                          \"autoFocus\": true,\n                                                          \"autoComplete\": \"off\"\n                                                      })}\n                                            />\n                                        </>\n                                    );\n                                })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameEditDisabled && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe\n                                                        ? {\n                                                              \"checked\": true\n                                                          }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                              \"value\": auth.selectedCredential\n                                          }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}