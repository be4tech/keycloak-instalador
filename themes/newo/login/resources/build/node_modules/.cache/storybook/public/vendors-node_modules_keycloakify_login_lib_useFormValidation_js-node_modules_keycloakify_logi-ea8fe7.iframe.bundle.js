"use strict";
(globalThis["webpackChunkkeycloakify_starter"] = globalThis["webpackChunkkeycloakify_starter"] || []).push([["vendors-node_modules_keycloakify_login_lib_useFormValidation_js-node_modules_keycloakify_logi-ea8fe7"],{

/***/ "./node_modules/keycloakify/lib/useGetClassName.js":
/*!*********************************************************!*\
  !*** ./node_modules/keycloakify/lib/useGetClassName.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createUseClassName: () => (/* binding */ createUseClassName)
/* harmony export */ });
/* harmony import */ var _tools_clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/clsx */ "./node_modules/keycloakify/tools/clsx.js");
/* harmony import */ var _tools_useConstCallback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/useConstCallback */ "./node_modules/keycloakify/tools/useConstCallback.js");


function createUseClassName(params) {
    const { defaultClasses } = params;
    function useGetClassName(params) {
        const { classes } = params;
        const getClassName = (0,_tools_useConstCallback__WEBPACK_IMPORTED_MODULE_1__.useConstCallback)((classKey) => {
            return (0,_tools_clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(classKey, defaultClasses[classKey], classes === null || classes === void 0 ? void 0 : classes[classKey]);
        });
        return { getClassName };
    }
    return { useGetClassName };
}
//# sourceMappingURL=useGetClassName.js.map

/***/ }),

/***/ "./node_modules/keycloakify/login/lib/useFormValidation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/keycloakify/login/lib/useFormValidation.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useFormValidation: () => (/* binding */ useFormValidation)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var _tools_Array_prototype_every__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tools/Array.prototype.every */ "./node_modules/keycloakify/tools/Array.prototype.every.js");
/* harmony import */ var _tools_Array_prototype_every__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tools_Array_prototype_every__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var tsafe_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tsafe/id */ "./node_modules/tsafe/esm/id.mjs");
/* harmony import */ var _tools_useConstCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tools/useConstCallback */ "./node_modules/keycloakify/tools/useConstCallback.js");
/* harmony import */ var _tools_emailRegExp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../tools/emailRegExp */ "./node_modules/keycloakify/tools/emailRegExp.js");






/**
 * NOTE: The attributesWithPassword returned is actually augmented with
 * artificial password related attributes only if kcContext.passwordRequired === true
 */
function useFormValidation(params) {
    const { kcContext, passwordValidators = {
        "length": {
            "ignore.empty.value": true,
            "min": "4"
        }
    }, i18n } = params;
    const attributesWithPassword = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => !kcContext.passwordRequired
        ? kcContext.profile.attributes
        : (() => {
            const name = kcContext.realm.registrationEmailAsUsername ? "email" : "username";
            return kcContext.profile.attributes.reduce((prev, curr) => [
                ...prev,
                ...(curr.name !== name
                    ? [curr]
                    : [
                        curr,
                        (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)({
                            "name": "password",
                            "displayName": (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)("${password}"),
                            "required": true,
                            "readOnly": false,
                            "validators": passwordValidators,
                            "annotations": {},
                            "groupAnnotations": {},
                            "autocomplete": "new-password"
                        }),
                        (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)({
                            "name": "password-confirm",
                            "displayName": (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)("${passwordConfirm}"),
                            "required": true,
                            "readOnly": false,
                            "validators": {
                                "_compareToOther": {
                                    "name": "password",
                                    "ignore.empty.value": true,
                                    "shouldBe": "equal",
                                    "error-message": (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)("${invalidPasswordConfirmMessage}")
                                }
                            },
                            "annotations": {},
                            "groupAnnotations": {},
                            "autocomplete": "new-password"
                        })
                    ])
            ], []);
        })(), [kcContext, passwordValidators]);
    const { getErrors } = useGetErrors({
        "kcContext": {
            "messagesPerField": kcContext.messagesPerField,
            "profile": {
                "attributes": attributesWithPassword
            }
        },
        i18n
    });
    const initialInternalState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => Object.fromEntries(attributesWithPassword
        .map(attribute => ({
        attribute,
        "errors": getErrors({
            "name": attribute.name,
            "fieldValueByAttributeName": Object.fromEntries(attributesWithPassword.map(({ name, value }) => [name, { "value": value !== null && value !== void 0 ? value : "" }]))
        })
    }))
        .map(({ attribute, errors }) => {
        var _a;
        return [
            attribute.name,
            {
                "value": (_a = attribute.value) !== null && _a !== void 0 ? _a : "",
                errors,
                "doDisplayPotentialErrorMessages": errors.length !== 0
            }
        ];
    })), [attributesWithPassword]);
    const [formValidationInternalState, formValidationDispatch] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useReducer)((state, params) => (Object.assign(Object.assign({}, state), { [params.name]: Object.assign(Object.assign({}, state[params.name]), (() => {
            switch (params.action) {
                case "focus lost":
                    return { "doDisplayPotentialErrorMessages": true };
                case "update value":
                    return {
                        "value": params.newValue,
                        "errors": getErrors({
                            "name": params.name,
                            "fieldValueByAttributeName": Object.assign(Object.assign({}, state), { [params.name]: { "value": params.newValue } })
                        })
                    };
            }
        })()) })), initialInternalState);
    const formValidationState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => ({
        "fieldStateByAttributeName": Object.fromEntries(Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [
            name,
            { value, "displayableErrors": doDisplayPotentialErrorMessages ? errors : [] }
        ])),
        "isFormSubmittable": Object.entries(formValidationInternalState).every(([name, { value, errors }]) => errors.length === 0 && (value !== "" || !attributesWithPassword.find(attribute => attribute.name === name).required))
    }), [formValidationInternalState, attributesWithPassword]);
    return {
        formValidationState,
        formValidationDispatch,
        attributesWithPassword
    };
}
/** Expect to be used in a component wrapped within a <I18nProvider> */
function useGetErrors(params) {
    const { kcContext, i18n } = params;
    const { messagesPerField, profile: { attributes } } = kcContext;
    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;
    const getErrors = (0,_tools_useConstCallback__WEBPACK_IMPORTED_MODULE_3__.useConstCallback)((params) => {
        var _a;
        const { name, fieldValueByAttributeName } = params;
        const { value } = fieldValueByAttributeName[name];
        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name);
        block: {
            if (defaultValue !== value) {
                break block;
            }
            let doesErrorExist;
            try {
                doesErrorExist = messagesPerField.existsError(name);
            }
            catch (_b) {
                break block;
            }
            if (!doesErrorExist) {
                break block;
            }
            const errorMessageStr = messagesPerField.get(name);
            return [
                {
                    "validatorName": undefined,
                    errorMessageStr,
                    "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { children: errorMessageStr }, 0)
                }
            ];
        }
        const errors = [];
        scope: {
            const validatorName = "length";
            const validator = validators[validatorName];
            if (validator === undefined) {
                break scope;
            }
            const { "ignore.empty.value": ignoreEmptyValue = false, max, min } = validator;
            if (ignoreEmptyValue && value === "") {
                break scope;
            }
            if (max !== undefined && value.length > parseInt(max)) {
                const msgArgs = ["error-invalid-length-too-long", max];
                errors.push({
                    "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: msg(...msgArgs) }, errors.length),
                    "errorMessageStr": msgStr(...msgArgs),
                    validatorName
                });
            }
            if (min !== undefined && value.length < parseInt(min)) {
                const msgArgs = ["error-invalid-length-too-short", min];
                errors.push({
                    "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: msg(...msgArgs) }, errors.length),
                    "errorMessageStr": msgStr(...msgArgs),
                    validatorName
                });
            }
        }
        scope: {
            const validatorName = "_compareToOther";
            const validator = validators[validatorName];
            if (validator === undefined) {
                break scope;
            }
            const { "ignore.empty.value": ignoreEmptyValue = false, name: otherName, shouldBe, "error-message": errorMessageKey } = validator;
            if (ignoreEmptyValue && value === "") {
                break scope;
            }
            const { value: otherValue } = fieldValueByAttributeName[otherName];
            const isValid = (() => {
                switch (shouldBe) {
                    case "different":
                        return otherValue !== value;
                    case "equal":
                        return otherValue === value;
                }
            })();
            if (isValid) {
                break scope;
            }
            const msgArg = [
                errorMessageKey !== null && errorMessageKey !== void 0 ? errorMessageKey : (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)((() => {
                    switch (shouldBe) {
                        case "equal":
                            return "shouldBeEqual";
                        case "different":
                            return "shouldBeDifferent";
                    }
                })()),
                otherName,
                name,
                shouldBe
            ];
            errors.push({
                validatorName,
                "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: advancedMsg(...msgArg) }, errors.length),
                "errorMessageStr": advancedMsgStr(...msgArg)
            });
        }
        scope: {
            const validatorName = "pattern";
            const validator = validators[validatorName];
            if (validator === undefined) {
                break scope;
            }
            const { "ignore.empty.value": ignoreEmptyValue = false, pattern, "error-message": errorMessageKey } = validator;
            if (ignoreEmptyValue && value === "") {
                break scope;
            }
            if (new RegExp(pattern).test(value)) {
                break scope;
            }
            const msgArgs = [errorMessageKey !== null && errorMessageKey !== void 0 ? errorMessageKey : (0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)("shouldMatchPattern"), pattern];
            errors.push({
                validatorName,
                "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: advancedMsg(...msgArgs) }, errors.length),
                "errorMessageStr": advancedMsgStr(...msgArgs)
            });
        }
        scope: {
            if (((_a = [...errors].reverse()[0]) === null || _a === void 0 ? void 0 : _a.validatorName) === "pattern") {
                break scope;
            }
            const validatorName = "email";
            const validator = validators[validatorName];
            if (validator === undefined) {
                break scope;
            }
            const { "ignore.empty.value": ignoreEmptyValue = false } = validator;
            if (ignoreEmptyValue && value === "") {
                break scope;
            }
            if (_tools_emailRegExp__WEBPACK_IMPORTED_MODULE_5__.emailRegexp.test(value)) {
                break scope;
            }
            const msgArgs = [(0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)("invalidEmailMessage")];
            errors.push({
                validatorName,
                "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: msg(...msgArgs) }, errors.length),
                "errorMessageStr": msgStr(...msgArgs)
            });
        }
        scope: {
            const validatorName = "integer";
            const validator = validators[validatorName];
            if (validator === undefined) {
                break scope;
            }
            const { "ignore.empty.value": ignoreEmptyValue = false, max, min } = validator;
            if (ignoreEmptyValue && value === "") {
                break scope;
            }
            const intValue = parseInt(value);
            if (isNaN(intValue)) {
                const msgArgs = ["mustBeAnInteger"];
                errors.push({
                    validatorName,
                    "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: msg(...msgArgs) }, errors.length),
                    "errorMessageStr": msgStr(...msgArgs)
                });
                break scope;
            }
            if (max !== undefined && intValue > parseInt(max)) {
                const msgArgs = ["error-number-out-of-range-too-big", max];
                errors.push({
                    validatorName,
                    "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: msg(...msgArgs) }, errors.length),
                    "errorMessageStr": msgStr(...msgArgs)
                });
                break scope;
            }
            if (min !== undefined && intValue < parseInt(min)) {
                const msgArgs = ["error-number-out-of-range-too-small", min];
                errors.push({
                    validatorName,
                    "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: msg(...msgArgs) }, errors.length),
                    "errorMessageStr": msgStr(...msgArgs)
                });
                break scope;
            }
        }
        scope: {
            const validatorName = "options";
            const validator = validators[validatorName];
            if (validator === undefined) {
                break scope;
            }
            if (value === "") {
                break scope;
            }
            if (validator.options.indexOf(value) >= 0) {
                break scope;
            }
            const msgArgs = [(0,tsafe_id__WEBPACK_IMPORTED_MODULE_4__.id)("notAValidOption")];
            errors.push({
                validatorName,
                "errorMessage": (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: advancedMsg(...msgArgs) }, errors.length),
                "errorMessageStr": advancedMsgStr(...msgArgs)
            });
        }
        //TODO: Implement missing validators.
        return errors;
    });
    return { getErrors };
}
//# sourceMappingURL=useFormValidation.js.map

/***/ }),

/***/ "./node_modules/keycloakify/login/lib/useGetClassName.js":
/*!***************************************************************!*\
  !*** ./node_modules/keycloakify/login/lib/useGetClassName.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useGetClassName: () => (/* binding */ useGetClassName)
/* harmony export */ });
/* harmony import */ var _lib_useGetClassName__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/useGetClassName */ "./node_modules/keycloakify/lib/useGetClassName.js");

const { useGetClassName } = (0,_lib_useGetClassName__WEBPACK_IMPORTED_MODULE_0__.createUseClassName)({
    "defaultClasses": {
        "kcHtmlClass": "login-pf",
        "kcLoginClass": "login-pf-page",
        "kcContentWrapperClass": "row",
        "kcHeaderClass": "login-pf-page-header",
        "kcHeaderWrapperClass": undefined,
        "kcFormCardClass": "card-pf",
        "kcFormCardAccountClass": "login-pf-accounts",
        "kcFormSocialAccountClass": "login-pf-social-section",
        "kcFormSocialAccountContentClass": "col-xs-12 col-sm-6",
        "kcFormHeaderClass": "login-pf-header",
        "kcLocaleWrapperClass": undefined,
        "kcFeedbackErrorIcon": "pficon pficon-error-circle-o",
        "kcFeedbackWarningIcon": "pficon pficon-warning-triangle-o",
        "kcFeedbackSuccessIcon": "pficon pficon-ok",
        "kcFeedbackInfoIcon": "pficon pficon-info",
        "kcResetFlowIcon": "pficon pficon-arrow fa-2x",
        "kcFormGroupClass": "form-group",
        "kcLabelWrapperClass": "col-xs-12 col-sm-12 col-md-12 col-lg-12",
        "kcSignUpClass": "login-pf-signup",
        "kcInfoAreaWrapperClass": undefined,
        "kcLogoClass": "login-pf-brand",
        "kcContainerClass": "container-fluid",
        "kcContentClass": "col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3",
        "kcFeedbackAreaClass": "col-md-12",
        "kcLocaleClass": "col-xs-12 col-sm-1",
        "kcAlertIconClasserror": "pficon pficon-error-circle-o",
        "kcFormAreaClass": "col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2",
        "kcFormSocialAccountListClass": "login-pf-social list-unstyled login-pf-social-all",
        "kcFormSocialAccountDoubleListClass": "login-pf-social-double-col",
        "kcFormSocialAccountListLinkClass": "login-pf-social-link",
        "kcWebAuthnKeyIcon": "pficon pficon-key",
        "kcWebAuthnDefaultIcon": "pficon pficon-key",
        "kcFormClass": "form-horizontal",
        "kcFormGroupErrorClass": "has-error",
        "kcLabelClass": "control-label",
        "kcInputClass": "form-control",
        "kcInputErrorMessageClass": "pf-c-form__helper-text pf-m-error required kc-feedback-text",
        "kcInputWrapperClass": "col-xs-12 col-sm-12 col-md-12 col-lg-12",
        "kcFormOptionsClass": "col-xs-12 col-sm-12 col-md-12 col-lg-12",
        "kcFormButtonsClass": "col-xs-12 col-sm-12 col-md-12 col-lg-12",
        "kcFormSettingClass": "login-pf-settings",
        "kcTextareaClass": "form-control",
        "kcInfoAreaClass": "col-xs-12 col-sm-4 col-md-4 col-lg-5 details",
        // user-profile grouping
        "kcFormGroupHeader": "pf-c-form__group",
        // css classes for form buttons main class used for all buttons
        "kcButtonClass": "btn",
        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)
        "kcButtonPrimaryClass": "btn-primary",
        "kcButtonDefaultClass": "btn-default",
        // classes defining size of the button
        "kcButtonLargeClass": "btn-lg",
        "kcButtonBlockClass": "btn-block",
        // css classes for input
        "kcInputLargeClass": "input-lg",
        // css classes for form accessability
        "kcSrOnlyClass": "sr-only",
        // css classes for select-authenticator form
        "kcSelectAuthListClass": "list-group list-view-pf",
        "kcSelectAuthListItemClass": "list-group-item list-view-pf-stacked",
        "kcSelectAuthListItemFillClass": "pf-l-split__item pf-m-fill",
        "kcSelectAuthListItemIconPropertyClass": "fa-2x select-auth-box-icon-properties",
        "kcSelectAuthListItemIconClass": "pf-l-split__item select-auth-box-icon",
        "kcSelectAuthListItemTitle": "select-auth-box-paragraph",
        "kcSelectAuthListItemInfoClass": "list-view-pf-main-info",
        "kcSelectAuthListItemLeftClass": "list-view-pf-left",
        "kcSelectAuthListItemBodyClass": "list-view-pf-body",
        "kcSelectAuthListItemDescriptionClass": "list-view-pf-description",
        "kcSelectAuthListItemHeadingClass": "list-group-item-heading",
        "kcSelectAuthListItemHelpTextClass": "list-group-item-text",
        // css classes for the authenticators
        "kcAuthenticatorDefaultClass": "fa list-view-pf-icon-lg",
        "kcAuthenticatorPasswordClass": "fa fa-unlock list-view-pf-icon-lg",
        "kcAuthenticatorOTPClass": "fa fa-mobile list-view-pf-icon-lg",
        "kcAuthenticatorWebAuthnClass": "fa fa-key list-view-pf-icon-lg",
        "kcAuthenticatorWebAuthnPasswordlessClass": "fa fa-key list-view-pf-icon-lg",
        //css classes for the OTP Login Form
        "kcSelectOTPListClass": "card-pf card-pf-view card-pf-view-select card-pf-view-single-select",
        "kcSelectOTPListItemClass": "card-pf-body card-pf-top-element",
        "kcAuthenticatorOtpCircleClass": "fa fa-mobile card-pf-icon-circle",
        "kcSelectOTPItemHeadingClass": "card-pf-title text-center",
        "kcFormOptionsWrapperClass": undefined
    }
});
//# sourceMappingURL=useGetClassName.js.map

/***/ }),

/***/ "./node_modules/keycloakify/tools/Array.prototype.every.js":
/*!*****************************************************************!*\
  !*** ./node_modules/keycloakify/tools/Array.prototype.every.js ***!
  \*****************************************************************/
/***/ (() => {


if (!Array.prototype.every) {
    Array.prototype.every = function (callbackfn, thisArg) {
        "use strict";
        var T, k;
        if (this == null) {
            throw new TypeError("this is null or not defined");
        }
        // 1. Let O be the result of calling ToObject passing the this
        //    value as the argument.
        var O = Object(this);
        // 2. Let lenValue be the result of calling the Get internal method
        //    of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var len = O.length >>> 0;
        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
        if (typeof callbackfn !== "function" && Object.prototype.toString.call(callbackfn) !== "[object Function]") {
            throw new TypeError();
        }
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 1) {
            T = thisArg;
        }
        // 6. Let k be 0.
        k = 0;
        // 7. Repeat, while k < len
        while (k < len) {
            var kValue;
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal
            //    method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {
                var testResult;
                // i. Let kValue be the result of calling the Get internal method
                //    of O with argument Pk.
                kValue = O[k];
                // ii. Let testResult be the result of calling the Call internal method
                // of callbackfn with T as the this value if T is not undefined
                // else is the result of calling callbackfn
                // and argument list containing kValue, k, and O.
                if (T)
                    testResult = callbackfn.call(T, kValue, k, O);
                else
                    testResult = callbackfn(kValue, k, O);
                // iii. If ToBoolean(testResult) is false, return false.
                if (!testResult) {
                    return false;
                }
            }
            k++;
        }
        return true;
    };
}
//# sourceMappingURL=Array.prototype.every.js.map

/***/ }),

/***/ "./node_modules/keycloakify/tools/clsx.js":
/*!************************************************!*\
  !*** ./node_modules/keycloakify/tools/clsx.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clsx: () => (/* binding */ clsx)
/* harmony export */ });
/* harmony import */ var tsafe_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsafe/assert */ "./node_modules/tsafe/esm/assert.mjs");
/* harmony import */ var tsafe_typeGuard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tsafe/typeGuard */ "./node_modules/tsafe/esm/typeGuard.mjs");


const clsx = (...args) => {
    const len = args.length;
    let i = 0;
    let cls = "";
    for (; i < len; i++) {
        const arg = args[i];
        if (arg == null)
            continue;
        let toAdd;
        switch (typeof arg) {
            case "boolean":
                break;
            case "object": {
                if (Array.isArray(arg)) {
                    toAdd = clsx(...arg);
                }
                else {
                    (0,tsafe_assert__WEBPACK_IMPORTED_MODULE_0__.assert)(!(0,tsafe_typeGuard__WEBPACK_IMPORTED_MODULE_1__.typeGuard)(arg, false));
                    toAdd = "";
                    for (const k in arg) {
                        if (arg[k] && k) {
                            toAdd && (toAdd += " ");
                            toAdd += k;
                        }
                    }
                }
                break;
            }
            default: {
                toAdd = arg;
            }
        }
        if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
        }
    }
    return cls;
};
//# sourceMappingURL=clsx.js.map

/***/ }),

/***/ "./node_modules/keycloakify/tools/emailRegExp.js":
/*!*******************************************************!*\
  !*** ./node_modules/keycloakify/tools/emailRegExp.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   emailRegexp: () => (/* binding */ emailRegexp)
/* harmony export */ });
const emailRegexp = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
//# sourceMappingURL=emailRegExp.js.map

/***/ }),

/***/ "./node_modules/tsafe/esm/typeGuard.mjs":
/*!**********************************************!*\
  !*** ./node_modules/tsafe/esm/typeGuard.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   typeGuard: () => (/* binding */ typeGuard)
/* harmony export */ });
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-explicit-any */
/** https://docs.tsafe.dev/typeguard */
function typeGuard(_value, isMatched) {
    return isMatched;
}
//# sourceMappingURL=typeGuard.mjs.map

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_keycloakify_login_lib_useFormValidation_js-node_modules_keycloakify_logi-ea8fe7.iframe.bundle.js.map