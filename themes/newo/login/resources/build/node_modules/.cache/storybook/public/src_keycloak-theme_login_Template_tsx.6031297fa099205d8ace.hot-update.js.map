{"version":3,"file":"src_keycloak-theme_login_Template_tsx.6031297fa099205d8ace.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AA3LA;AAuBA;AAAA;AAvBA;AAAA","sources":["webpack://keycloakify-starter/./src/keycloak-theme/login/Template.tsx"],"sourcesContent":["// Copy pasted from: https://github.com/InseeFrLab/keycloakify/blob/main/src/login/Template.tsx\n\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { usePrepareTemplate } from \"keycloakify/lib/usePrepareTemplate\";\nimport { type TemplateProps } from \"keycloakify/login/TemplateProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"./kcContext\";\nimport type { I18n } from \"./i18n\";\n\nexport default function Template(props: TemplateProps<KcContext, I18n>) {\n    const {\n        displayInfo = false,\n        displayMessage = true,\n        displayRequiredFields = false,\n        displayWide = false,\n        showAnotherWayIfPresent = true,\n        headerNode,\n        showUsernameNode = null,\n        infoNode = null,\n        kcContext,\n        i18n,\n        doUseDefaultCss,\n        classes,\n        children\n    } = props;\n\n    const { getClassName } = useGetClassName({ doUseDefaultCss, classes });\n\n    const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n;\n\n    const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext;\n\n    const { isReady } = usePrepareTemplate({\n        \"doFetchDefaultThemeResources\": doUseDefaultCss,\n        url,\n        \"stylesCommon\": [\n            \"node_modules/patternfly/dist/css/patternfly.min.css\",\n            \"node_modules/patternfly/dist/css/patternfly-additions.min.css\",\n            \"lib/zocial/zocial.css\"\n        ],\n        \"styles\": [\"css/login.css\"],\n        \"htmlClassName\": getClassName(\"kcHtmlClass\"),\n        \"bodyClassName\": undefined\n    });\n\n    if (!isReady) {\n        return null;\n    }\n\n    return (\n        <div className={getClassName(\"kcLoginClass\")}>\n            <div id=\"kc-header\" className={getClassName(\"kcHeaderClass\")}>\n                <div id=\"kc-header-wrapper\" className={getClassName(\"kcHeaderWrapperClass\")}>\n                    {msg(\"loginTitleHtml\", realm.displayNameHtml)}\n                    <img src=\"https://newo.co/wp-content/uploads/2022/11/logo-newo.png\"></img>\n                </div>\n            </div>\n\n            <div className={clsx(getClassName(\"kcFormCardClass\"), displayWide && getClassName(\"kcFormCardAccountClass\"))}>\n                <header className={getClassName(\"kcFormHeaderClass\")}>\n                    {realm.internationalizationEnabled && (assert(locale !== undefined), true) && locale.supported.length > 1 && (\n                        <div id=\"kc-locale\">\n                            <div id=\"kc-locale-wrapper\" className={getClassName(\"kcLocaleWrapperClass\")}>\n                                <div className=\"kc-dropdown\" id=\"kc-locale-dropdown\">\n                                    {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                                    <a href=\"#\" id=\"kc-current-locale-link\">\n                                        {labelBySupportedLanguageTag[currentLanguageTag]}\n                                    </a>\n                                    <ul>\n                                        {locale.supported.map(({ languageTag }) => (\n                                            <li key={languageTag} className=\"kc-dropdown-item\">\n                                                {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                                                <a href=\"#\" onClick={() => changeLocale(languageTag)}>\n                                                    {labelBySupportedLanguageTag[languageTag]}\n                                                </a>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n                        displayRequiredFields ? (\n                            <div className={getClassName(\"kcContentWrapperClass\")}>\n                                <div className={clsx(getClassName(\"kcLabelWrapperClass\"), \"subtitle\")}>\n                                    <span className=\"subtitle\">\n                                        <span className=\"required\">*</span>\n                                        {msg(\"requiredFields\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-md-10\">\n                                    <h1 id=\"kc-page-title\">{headerNode}</h1>\n                                </div>\n                            </div>\n                        ) : (\n                            <h1 id=\"kc-page-title\">{headerNode}</h1>\n                        )\n                    ) : displayRequiredFields ? (\n                        <div className={getClassName(\"kcContentWrapperClass\")}>\n                            <div className={clsx(getClassName(\"kcLabelWrapperClass\"), \"subtitle\")}>\n                                <span className=\"subtitle\">\n                                    <span className=\"required\">*</span> {msg(\"requiredFields\")}\n                                </span>\n                            </div>\n                            <div className=\"col-md-10\">\n                                {showUsernameNode}\n                                <div className={getClassName(\"kcFormGroupClass\")}>\n                                    <div id=\"kc-username\">\n                                        <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                                        <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                                            <div className=\"kc-login-tooltip\">\n                                                <i className={getClassName(\"kcResetFlowIcon\")}></i>\n                                                <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                            </div>\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <>\n                            {showUsernameNode}\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <div id=\"kc-username\">\n                                    <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                                    <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                                        <div className=\"kc-login-tooltip\">\n                                            <i className={getClassName(\"kcResetFlowIcon\")}></i>\n                                            <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                        </div>\n                                    </a>\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </header>\n                <div id=\"kc-content\">\n                    <div id=\"kc-content-wrapper\">\n                        {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n                        {displayMessage && message !== undefined && (message.type !== \"warning\" || !isAppInitiatedAction) && (\n                            <div className={clsx(\"alert\", `alert-${message.type}`)}>\n                                {message.type === \"success\" && <span className={getClassName(\"kcFeedbackSuccessIcon\")}></span>}\n                                {message.type === \"warning\" && <span className={getClassName(\"kcFeedbackWarningIcon\")}></span>}\n                                {message.type === \"error\" && <span className={getClassName(\"kcFeedbackErrorIcon\")}></span>}\n                                {message.type === \"info\" && <span className={getClassName(\"kcFeedbackInfoIcon\")}></span>}\n                                <span\n                                    className=\"kc-feedback-text\"\n                                    dangerouslySetInnerHTML={{\n                                        \"__html\": message.summary\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {children}\n                        {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n                            <form\n                                id=\"kc-select-try-another-way-form\"\n                                action={url.loginAction}\n                                method=\"post\"\n                                className={clsx(displayWide && getClassName(\"kcContentWrapperClass\"))}\n                            >\n                                <div\n                                    className={clsx(\n                                        displayWide && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                                    )}\n                                >\n                                    <div className={getClassName(\"kcFormGroupClass\")}>\n                                        <input type=\"hidden\" name=\"tryAnotherWay\" value=\"on\" />\n                                        {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                                        <a\n                                            href=\"#\"\n                                            id=\"try-another-way\"\n                                            onClick={() => {\n                                                document.forms[\"kc-select-try-another-way-form\" as never].submit();\n                                                return false;\n                                            }}\n                                        >\n                                            {msg(\"doTryAnotherWay\")}\n                                        </a>\n                                    </div>\n                                </div>\n                            </form>\n                        )}\n                        {displayInfo && (\n                            <div id=\"kc-info\" className={getClassName(\"kcSignUpClass\")}>\n                                <div id=\"kc-info-wrapper\" className={getClassName(\"kcInfoAreaWrapperClass\")}>\n                                    {infoNode}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"sourceRoot":""}