{"version":3,"file":"node_modules_keycloakify_account_pages_Password_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keycloakify-starter/./node_modules/keycloakify/account/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/account/pages/Password.js","webpack://keycloakify-starter/./node_modules/keycloakify/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/tools/clsx.js","webpack://keycloakify-starter/./node_modules/tsafe/esm/typeGuard.mjs"],"sourcesContent":["import { createUseClassName } from \"../../lib/useGetClassName\";\nexport const { useGetClassName } = createUseClassName({\n    \"defaultClasses\": {\n        \"kcBodyClass\": undefined,\n        \"kcButtonClass\": \"btn\",\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonDefaultClass\": \"btn-default\"\n    }\n});\n//# sourceMappingURL=useGetClassName.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { clsx } from \"../../tools/clsx\";\nimport { useGetClassName } from \"../../account/lib/useGetClassName\";\nexport default function Password(props) {\n    var _a;\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": Object.assign(Object.assign({}, classes), { \"kcBodyClass\": clsx(classes === null || classes === void 0 ? void 0 : classes.kcBodyClass, \"password\") })\n    });\n    const { url, password, account, stateChecker } = kcContext;\n    const { msgStr, msg } = i18n;\n    const [currentPassword, setCurrentPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [newPasswordConfirm, setNewPasswordConfirm] = useState(\"\");\n    const [newPasswordError, setNewPasswordError] = useState(\"\");\n    const [newPasswordConfirmError, setNewPasswordConfirmError] = useState(\"\");\n    const [hasNewPasswordBlurred, setHasNewPasswordBlurred] = useState(false);\n    const [hasNewPasswordConfirmBlurred, setHasNewPasswordConfirmBlurred] = useState(false);\n    const checkNewPassword = (newPassword) => {\n        if (!password.passwordSet) {\n            return;\n        }\n        if (newPassword === currentPassword) {\n            setNewPasswordError(msgStr(\"newPasswordSameAsOld\"));\n        }\n        else {\n            setNewPasswordError(\"\");\n        }\n    };\n    const checkNewPasswordConfirm = (newPasswordConfirm) => {\n        if (newPasswordConfirm === \"\") {\n            return;\n        }\n        if (newPassword !== newPasswordConfirm) {\n            setNewPasswordConfirmError(msgStr(\"passwordConfirmNotMatch\"));\n        }\n        else {\n            setNewPasswordConfirmError(\"\");\n        }\n    };\n    return (_jsxs(Template, Object.assign({}, {\n        kcContext: Object.assign(Object.assign({}, kcContext), { \"message\": (() => {\n                if (newPasswordError !== \"\") {\n                    return {\n                        \"type\": \"error\",\n                        \"summary\": newPasswordError\n                    };\n                }\n                if (newPasswordConfirmError !== \"\") {\n                    return {\n                        \"type\": \"error\",\n                        \"summary\": newPasswordConfirmError\n                    };\n                }\n                return kcContext.message;\n            })() }),\n        i18n,\n        doUseDefaultCss,\n        classes\n    }, { active: \"password\" }, { children: [_jsxs(\"div\", Object.assign({ className: \"row\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-md-10\" }, { children: _jsx(\"h2\", { children: msg(\"changePasswordHtmlTitle\") }) })), _jsx(\"div\", Object.assign({ className: \"col-md-2 subtitle\" }, { children: _jsx(\"span\", Object.assign({ className: \"subtitle\" }, { children: msg(\"allFieldsRequired\") })) }))] })), _jsxs(\"form\", Object.assign({ action: url.passwordUrl, className: \"form-horizontal\", method: \"post\" }, { children: [_jsx(\"input\", { type: \"text\", id: \"username\", name: \"username\", value: (_a = account.username) !== null && _a !== void 0 ? _a : \"\", autoComplete: \"username\", readOnly: true, style: { \"display\": \"none\" } }), password.passwordSet && (_jsxs(\"div\", Object.assign({ className: \"form-group\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: _jsx(\"label\", Object.assign({ htmlFor: \"password\", className: \"control-label\" }, { children: msg(\"password\") })) })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"password\", className: \"form-control\", id: \"password\", name: \"password\", autoFocus: true, autoComplete: \"current-password\", value: currentPassword, onChange: event => setCurrentPassword(event.target.value) }) }))] }))), _jsx(\"input\", { type: \"hidden\", id: \"stateChecker\", name: \"stateChecker\", value: stateChecker }), _jsxs(\"div\", Object.assign({ className: \"form-group\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: _jsx(\"label\", Object.assign({ htmlFor: \"password-new\", className: \"control-label\" }, { children: msg(\"passwordNew\") })) })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"password\", className: \"form-control\", id: \"password-new\", name: \"password-new\", autoComplete: \"new-password\", value: newPassword, onChange: event => {\n                                        const newPassword = event.target.value;\n                                        setNewPassword(newPassword);\n                                        if (hasNewPasswordBlurred) {\n                                            checkNewPassword(newPassword);\n                                        }\n                                    }, onBlur: () => {\n                                        setHasNewPasswordBlurred(true);\n                                        checkNewPassword(newPassword);\n                                    } }) }))] })), _jsxs(\"div\", Object.assign({ className: \"form-group\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: _jsx(\"label\", Object.assign({ htmlFor: \"password-confirm\", className: \"control-label two-lines\" }, { children: msg(\"passwordConfirm\") })) })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"password\", className: \"form-control\", id: \"password-confirm\", name: \"password-confirm\", autoComplete: \"new-password\", value: newPasswordConfirm, onChange: event => {\n                                        const newPasswordConfirm = event.target.value;\n                                        setNewPasswordConfirm(newPasswordConfirm);\n                                        if (hasNewPasswordConfirmBlurred) {\n                                            checkNewPasswordConfirm(newPasswordConfirm);\n                                        }\n                                    }, onBlur: () => {\n                                        setHasNewPasswordConfirmBlurred(true);\n                                        checkNewPasswordConfirm(newPasswordConfirm);\n                                    } }) }))] })), _jsx(\"div\", Object.assign({ className: \"form-group\" }, { children: _jsx(\"div\", Object.assign({ id: \"kc-form-buttons\", className: \"col-md-offset-2 col-md-10 submit\" }, { children: _jsx(\"div\", { children: _jsx(\"button\", Object.assign({ disabled: newPasswordError !== \"\" || newPasswordConfirmError !== \"\", type: \"submit\", className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonLargeClass\")), name: \"submitAction\", value: \"Save\" }, { children: msg(\"doSave\") })) }) })) }))] }))] })));\n}\n//# sourceMappingURL=Password.js.map","import { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"../tools/useConstCallback\";\nexport function createUseClassName(params) {\n    const { defaultClasses } = params;\n    function useGetClassName(params) {\n        const { classes } = params;\n        const getClassName = useConstCallback((classKey) => {\n            return clsx(classKey, defaultClasses[classKey], classes === null || classes === void 0 ? void 0 : classes[classKey]);\n        });\n        return { getClassName };\n    }\n    return { useGetClassName };\n}\n//# sourceMappingURL=useGetClassName.js.map","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport const clsx = (...args) => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null)\n            continue;\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                }\n                else {\n                    assert(!typeGuard(arg, false));\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n//# sourceMappingURL=clsx.js.map","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard(_value, isMatched) {\n    return isMatched;\n}\n//# sourceMappingURL=typeGuard.mjs.map"],"names":[],"sourceRoot":""}