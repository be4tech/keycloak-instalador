{"version":3,"file":"vendors-node_modules_keycloakify_login_pages_Login_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keycloakify-starter/./node_modules/keycloakify/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/login/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/login/pages/Login.js","webpack://keycloakify-starter/./node_modules/keycloakify/tools/clsx.js","webpack://keycloakify-starter/./node_modules/tsafe/esm/typeGuard.mjs"],"sourcesContent":["import { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"../tools/useConstCallback\";\nexport function createUseClassName(params) {\n    const { defaultClasses } = params;\n    function useGetClassName(params) {\n        const { classes } = params;\n        const getClassName = useConstCallback((classKey) => {\n            return clsx(classKey, defaultClasses[classKey], classes === null || classes === void 0 ? void 0 : classes[classKey]);\n        });\n        return { getClassName };\n    }\n    return { useGetClassName };\n}\n//# sourceMappingURL=useGetClassName.js.map","import { createUseClassName } from \"../../lib/useGetClassName\";\nexport const { useGetClassName } = createUseClassName({\n    \"defaultClasses\": {\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n//# sourceMappingURL=useGetClassName.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { clsx } from \"../../tools/clsx\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { useGetClassName } from \"../../login/lib/useGetClassName\";\nexport default function Login(props) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n    const { msg, msgStr } = i18n;\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n    const onSubmit = useConstCallback(e => {\n        var _a;\n        e.preventDefault();\n        setIsLoginButtonDisabled(true);\n        const formElement = e.target;\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        (_a = formElement.querySelector(\"input[name='email']\")) === null || _a === void 0 ? void 0 : _a.setAttribute(\"name\", \"username\");\n        formElement.submit();\n    });\n    return (_jsx(Template, Object.assign({}, { kcContext, i18n, doUseDefaultCss, classes }, { displayInfo: social.displayInfo, displayWide: realm.password && social.providers !== undefined, headerNode: msg(\"doLogIn\"), infoNode: realm.password &&\n            realm.registrationAllowed &&\n            !registrationDisabled && (_jsx(\"div\", Object.assign({ id: \"kc-registration\" }, { children: _jsxs(\"span\", { children: [msg(\"noAccount\"), _jsx(\"a\", Object.assign({ tabIndex: 6, href: url.registrationUrl }, { children: msg(\"doRegister\") }))] }) }))) }, { children: _jsxs(\"div\", Object.assign({ id: \"kc-form\", className: clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\")) }, { children: [_jsx(\"div\", Object.assign({ id: \"kc-form-wrapper\", className: clsx(realm.password &&\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]) }, { children: realm.password && (_jsxs(\"form\", Object.assign({ id: \"kc-form-login\", onSubmit: onSubmit, action: url.loginAction, method: \"post\" }, { children: [_jsx(\"div\", Object.assign({ className: getClassName(\"kcFormGroupClass\") }, { children: (() => {\n                                    var _a;\n                                    const label = !realm.loginWithEmailAllowed\n                                        ? \"username\"\n                                        : realm.registrationEmailAsUsername\n                                            ? \"email\"\n                                            : \"usernameOrEmail\";\n                                    const autoCompleteHelper = label === \"usernameOrEmail\" ? \"username\" : label;\n                                    return (_jsxs(_Fragment, { children: [_jsx(\"label\", Object.assign({ htmlFor: autoCompleteHelper, className: getClassName(\"kcLabelClass\") }, { children: msg(label) })), _jsx(\"input\", Object.assign({ tabIndex: 1, id: autoCompleteHelper, className: getClassName(\"kcInputClass\"), \n                                                //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                //the browser how to pre fill the form but before submit we put it back\n                                                //to username because it is what keycloak expects.\n                                                name: autoCompleteHelper, defaultValue: (_a = login.username) !== null && _a !== void 0 ? _a : \"\", type: \"text\" }, (usernameEditDisabled\n                                                ? { \"disabled\": true }\n                                                : {\n                                                    \"autoFocus\": true,\n                                                    \"autoComplete\": \"off\"\n                                                })))] }));\n                                })() })), _jsxs(\"div\", Object.assign({ className: getClassName(\"kcFormGroupClass\") }, { children: [_jsx(\"label\", Object.assign({ htmlFor: \"password\", className: getClassName(\"kcLabelClass\") }, { children: msg(\"password\") })), _jsx(\"input\", { tabIndex: 2, id: \"password\", className: getClassName(\"kcInputClass\"), name: \"password\", type: \"password\", autoComplete: \"off\" })] })), _jsxs(\"div\", Object.assign({ className: clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\")) }, { children: [_jsx(\"div\", Object.assign({ id: \"kc-form-options\" }, { children: realm.rememberMe && !usernameEditDisabled && (_jsx(\"div\", Object.assign({ className: \"checkbox\" }, { children: _jsxs(\"label\", { children: [_jsx(\"input\", Object.assign({ tabIndex: 3, id: \"rememberMe\", name: \"rememberMe\", type: \"checkbox\" }, (login.rememberMe === \"on\"\n                                                        ? {\n                                                            \"checked\": true\n                                                        }\n                                                        : {}))), msg(\"rememberMe\")] }) }))) })), _jsx(\"div\", Object.assign({ className: getClassName(\"kcFormOptionsWrapperClass\") }, { children: realm.resetPasswordAllowed && (_jsx(\"span\", { children: _jsx(\"a\", Object.assign({ tabIndex: 5, href: url.loginResetCredentialsUrl }, { children: msg(\"doForgotPassword\") })) })) }))] })), _jsxs(\"div\", Object.assign({ id: \"kc-form-buttons\", className: getClassName(\"kcFormGroupClass\") }, { children: [_jsx(\"input\", Object.assign({ type: \"hidden\", id: \"id-hidden-input\", name: \"credentialId\" }, ((auth === null || auth === void 0 ? void 0 : auth.selectedCredential) !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {}))), _jsx(\"input\", { tabIndex: 4, className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonBlockClass\"), getClassName(\"kcButtonLargeClass\")), name: \"login\", id: \"kc-login\", type: \"submit\", value: msgStr(\"doLogIn\"), disabled: isLoginButtonDisabled })] }))] }))) })), realm.password && social.providers !== undefined && (_jsx(\"div\", Object.assign({ id: \"kc-social-providers\", className: clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")) }, { children: _jsx(\"ul\", Object.assign({ className: clsx(getClassName(\"kcFormSocialAccountListClass\"), social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")) }, { children: social.providers.map(p => (_jsx(\"li\", Object.assign({ className: getClassName(\"kcFormSocialAccountListLinkClass\") }, { children: _jsx(\"a\", Object.assign({ href: p.loginUrl, id: `zocial-${p.alias}`, className: clsx(\"zocial\", p.providerId) }, { children: _jsx(\"span\", { children: p.displayName }) })) }), p.providerId))) })) })))] })) })));\n}\n//# sourceMappingURL=Login.js.map","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport const clsx = (...args) => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null)\n            continue;\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                }\n                else {\n                    assert(!typeGuard(arg, false));\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n//# sourceMappingURL=clsx.js.map","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard(_value, isMatched) {\n    return isMatched;\n}\n//# sourceMappingURL=typeGuard.mjs.map"],"names":[],"sourceRoot":""}