{"version":3,"file":"node_modules_keycloakify_account_pages_Account_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keycloakify-starter/./node_modules/keycloakify/account/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/account/pages/Account.js","webpack://keycloakify-starter/./node_modules/keycloakify/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/tools/clsx.js","webpack://keycloakify-starter/./node_modules/tsafe/esm/typeGuard.mjs"],"sourcesContent":["import { createUseClassName } from \"../../lib/useGetClassName\";\nexport const { useGetClassName } = createUseClassName({\n    \"defaultClasses\": {\n        \"kcBodyClass\": undefined,\n        \"kcButtonClass\": \"btn\",\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonDefaultClass\": \"btn-default\"\n    }\n});\n//# sourceMappingURL=useGetClassName.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { clsx } from \"../../tools/clsx\";\nimport { useGetClassName } from \"../../account/lib/useGetClassName\";\nexport default function Account(props) {\n    var _a, _b, _c, _d;\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": Object.assign(Object.assign({}, classes), { \"kcBodyClass\": clsx(classes === null || classes === void 0 ? void 0 : classes.kcBodyClass, \"user\") })\n    });\n    const { url, realm, messagesPerField, stateChecker, account, referrer } = kcContext;\n    const { msg } = i18n;\n    return (_jsxs(Template, Object.assign({}, { kcContext, i18n, doUseDefaultCss, classes }, { active: \"account\" }, { children: [_jsxs(\"div\", Object.assign({ className: \"row\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-md-10\" }, { children: _jsx(\"h2\", { children: msg(\"editAccountHtmlTitle\") }) })), _jsx(\"div\", Object.assign({ className: \"col-md-2 subtitle\" }, { children: _jsxs(\"span\", Object.assign({ className: \"subtitle\" }, { children: [_jsx(\"span\", Object.assign({ className: \"required\" }, { children: \"*\" })), \" \", msg(\"requiredFields\")] })) }))] })), _jsxs(\"form\", Object.assign({ action: url.accountUrl, className: \"form-horizontal\", method: \"post\" }, { children: [_jsx(\"input\", { type: \"hidden\", id: \"stateChecker\", name: \"stateChecker\", value: stateChecker }), !realm.registrationEmailAsUsername && (_jsxs(\"div\", Object.assign({ className: clsx(\"form-group\", messagesPerField.printIfExists(\"username\", \"has-error\")) }, { children: [_jsxs(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: [_jsx(\"label\", Object.assign({ htmlFor: \"username\", className: \"control-label\" }, { children: msg(\"username\") })), realm.editUsernameAllowed && _jsx(\"span\", Object.assign({ className: \"required\" }, { children: \"*\" }))] })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"text\", className: \"form-control\", id: \"username\", name: \"username\", disabled: !realm.editUsernameAllowed, value: (_a = account.username) !== null && _a !== void 0 ? _a : \"\" }) }))] }))), _jsxs(\"div\", Object.assign({ className: clsx(\"form-group\", messagesPerField.printIfExists(\"email\", \"has-error\")) }, { children: [_jsxs(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: [_jsx(\"label\", Object.assign({ htmlFor: \"email\", className: \"control-label\" }, { children: msg(\"email\") })), \" \", _jsx(\"span\", Object.assign({ className: \"required\" }, { children: \"*\" }))] })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"text\", className: \"form-control\", id: \"email\", name: \"email\", autoFocus: true, value: (_b = account.email) !== null && _b !== void 0 ? _b : \"\" }) }))] })), _jsxs(\"div\", Object.assign({ className: clsx(\"form-group\", messagesPerField.printIfExists(\"firstName\", \"has-error\")) }, { children: [_jsxs(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: [_jsx(\"label\", Object.assign({ htmlFor: \"firstName\", className: \"control-label\" }, { children: msg(\"firstName\") })), \" \", _jsx(\"span\", Object.assign({ className: \"required\" }, { children: \"*\" }))] })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"text\", className: \"form-control\", id: \"firstName\", name: \"firstName\", value: (_c = account.firstName) !== null && _c !== void 0 ? _c : \"\" }) }))] })), _jsxs(\"div\", Object.assign({ className: clsx(\"form-group\", messagesPerField.printIfExists(\"lastName\", \"has-error\")) }, { children: [_jsxs(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: [_jsx(\"label\", Object.assign({ htmlFor: \"lastName\", className: \"control-label\" }, { children: msg(\"lastName\") })), \" \", _jsx(\"span\", Object.assign({ className: \"required\" }, { children: \"*\" }))] })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"text\", className: \"form-control\", id: \"lastName\", name: \"lastName\", value: (_d = account.lastName) !== null && _d !== void 0 ? _d : \"\" }) }))] })), _jsx(\"div\", Object.assign({ className: \"form-group\" }, { children: _jsx(\"div\", Object.assign({ id: \"kc-form-buttons\", className: \"col-md-offset-2 col-md-10 submit\" }, { children: _jsxs(\"div\", { children: [referrer !== undefined && _jsx(\"a\", Object.assign({ href: referrer === null || referrer === void 0 ? void 0 : referrer.url }, { children: msg(\"backToApplication\") })), _jsx(\"button\", Object.assign({ type: \"submit\", className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonLargeClass\")), name: \"submitAction\", value: \"Save\" }, { children: msg(\"doSave\") })), _jsx(\"button\", Object.assign({ type: \"submit\", className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonDefaultClass\"), getClassName(\"kcButtonLargeClass\")), name: \"submitAction\", value: \"Cancel\" }, { children: msg(\"doCancel\") }))] }) })) }))] }))] })));\n}\n//# sourceMappingURL=Account.js.map","import { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"../tools/useConstCallback\";\nexport function createUseClassName(params) {\n    const { defaultClasses } = params;\n    function useGetClassName(params) {\n        const { classes } = params;\n        const getClassName = useConstCallback((classKey) => {\n            return clsx(classKey, defaultClasses[classKey], classes === null || classes === void 0 ? void 0 : classes[classKey]);\n        });\n        return { getClassName };\n    }\n    return { useGetClassName };\n}\n//# sourceMappingURL=useGetClassName.js.map","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport const clsx = (...args) => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null)\n            continue;\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                }\n                else {\n                    assert(!typeGuard(arg, false));\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n//# sourceMappingURL=clsx.js.map","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard(_value, isMatched) {\n    return isMatched;\n}\n//# sourceMappingURL=typeGuard.mjs.map"],"names":[],"sourceRoot":""}