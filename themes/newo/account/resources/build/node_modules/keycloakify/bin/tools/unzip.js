"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unzip = void 0;
var promises_1 = __importDefault(require("node:fs/promises"));
var fs_1 = __importDefault(require("fs"));
var node_path_1 = __importDefault(require("node:path"));
var yauzl_1 = __importDefault(require("yauzl"));
var node_stream_1 = __importDefault(require("node:stream"));
var node_util_1 = require("node:util");
var pipeline = (0, node_util_1.promisify)(node_stream_1.default.pipeline);
function pathExists(path) {
    return __awaiter(this, void 0, void 0, function () {
        var error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, promises_1.default.stat(path)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, true];
                case 2:
                    error_1 = _a.sent();
                    if (error_1.code === "ENOENT") {
                        return [2 /*return*/, false];
                    }
                    throw error_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}
function unzip(file, targetFolder, unzipSubPath) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            // add trailing slash to unzipSubPath and targetFolder
            if (unzipSubPath && (!unzipSubPath.endsWith("/") || !unzipSubPath.endsWith("\\"))) {
                unzipSubPath += "/";
            }
            if (!targetFolder.endsWith("/") || !targetFolder.endsWith("\\")) {
                targetFolder += "/";
            }
            if (!fs_1.default.existsSync(targetFolder)) {
                fs_1.default.mkdirSync(targetFolder, { recursive: true });
            }
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    yauzl_1.default.open(file, { lazyEntries: true }, function (err, zipfile) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (err) {
                                reject(err);
                                return [2 /*return*/];
                            }
                            zipfile.readEntry();
                            zipfile.on("entry", function (entry) { return __awaiter(_this, void 0, void 0, function () {
                                var target;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (unzipSubPath) {
                                                // Skip files outside of the unzipSubPath
                                                if (!entry.fileName.startsWith(unzipSubPath)) {
                                                    zipfile.readEntry();
                                                    return [2 /*return*/];
                                                }
                                                // Remove the unzipSubPath from the file name
                                                entry.fileName = entry.fileName.substring(unzipSubPath.length);
                                            }
                                            target = node_path_1.default.join(targetFolder, entry.fileName);
                                            if (!/[\/\\]$/.test(target)) return [3 /*break*/, 2];
                                            return [4 /*yield*/, promises_1.default.mkdir(target, { recursive: true })];
                                        case 1:
                                            _a.sent();
                                            zipfile.readEntry();
                                            return [2 /*return*/];
                                        case 2: return [4 /*yield*/, pathExists(target)];
                                        case 3:
                                            // Skip existing files
                                            if (_a.sent()) {
                                                zipfile.readEntry();
                                                return [2 /*return*/];
                                            }
                                            zipfile.openReadStream(entry, function (err, readStream) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (err) {
                                                                reject(err);
                                                                return [2 /*return*/];
                                                            }
                                                            return [4 /*yield*/, pipeline(readStream, fs_1.default.createWriteStream(target))];
                                                        case 1:
                                                            _a.sent();
                                                            zipfile.readEntry();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); });
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            zipfile.once("end", function () {
                                zipfile.close();
                                resolve();
                            });
                            return [2 /*return*/];
                        });
                    }); });
                })];
        });
    });
}
exports.unzip = unzip;
//# sourceMappingURL=unzip.js.map