"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDomRect = exports.domRectKeys = void 0;
var react_1 = require("react");
var evt_1 = require("evt");
var ResizeObserver_1 = __importDefault(require("./ResizeObserver"));
var memoizee_1 = __importDefault(require("memoizee"));
var useConstCallback_1 = require("../useConstCallback");
var hooks_1 = require("evt/hooks");
var useStateRef_1 = require("../useStateRef");
//TODO: only re-renders when width or height change.
exports.domRectKeys = ["bottom", "right", "top", "left", "height", "width"];
function useDomRect(params) {
    var _a;
    var _b = (function useClosure() {
        var _a = __read((0, react_1.useState)(function () { return (0, memoizee_1.default)(function (bottom, right, top, left, height, width) { return ({
            bottom: bottom,
            right: right,
            top: top,
            left: left,
            height: height,
            width: width
        }); }, { "max": 1 }); }), 1), toMemoPartial = _a[0];
        var _b = __read((0, react_1.useState)(function () { return toMemoPartial(0, 0, 0, 0, 0, 0); }), 2), domRect = _b[0], setDomRect = _b[1];
        var updateDomRect = (0, useConstCallback_1.useConstCallback)(function (element) {
            var _a = element.getBoundingClientRect(), bottom = _a.bottom, right = _a.right, top = _a.top, left = _a.left, height = _a.height, width = _a.width;
            setDomRect(toMemoPartial(bottom, right, top, left, height, width));
        });
        return { domRect: domRect, updateDomRect: updateDomRect };
    })(), domRect = _b.domRect, updateDomRect = _b.updateDomRect;
    var _c = __read((0, react_1.useState)(function () { return evt_1.Evt.create(); }), 1), evtForceUpdate = _c[0];
    /** Shouldn't be necessary but hey... */
    var checkIfDomRectUpdated = (0, useConstCallback_1.useConstCallback)(function () { return evtForceUpdate.post(); });
    var internallyCreatedRef = (0, useStateRef_1.useStateRef)(null);
    var ref = (_a = params === null || params === void 0 ? void 0 : params.ref) !== null && _a !== void 0 ? _a : internallyCreatedRef;
    (0, hooks_1.useEvt)(function (ctx) {
        var element = ref.current;
        if (element === null) {
            return;
        }
        ctx.evtDoneOrAborted.setMaxHandlers(Infinity);
        evt_1.Evt.merge([
            evt_1.Evt.from(ctx, ResizeObserver_1.default, element),
            evtForceUpdate.pipe(ctx)
        ])
            .toStateful()
            .attach(function () { return (function callee(previousCallCount) {
            return __awaiter(this, void 0, void 0, function () {
                var timer_1, pr, internalCtx;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pr = new Promise(function (resolve) { return timer_1 = setTimeout(resolve, 50); });
                            internalCtx = evt_1.Evt.newCtx();
                            ctx.evtDoneOrAborted.attachOnce(internalCtx, function () { return clearTimeout(timer_1); });
                            return [4 /*yield*/, pr];
                        case 1:
                            _a.sent();
                            internalCtx.done();
                            updateDomRect(element);
                            if (previousCallCount < 6) {
                                callee(previousCallCount + 1);
                                return [2 /*return*/];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        })(0); });
    }, [ref.current]);
    (0, react_1.useEffect)(function () {
        var element = ref.current;
        if (element === null) {
            return;
        }
        updateDomRect(element);
    });
    return { ref: ref, domRect: domRect, checkIfDomRectUpdated: checkIfDomRectUpdated };
}
exports.useDomRect = useDomRect;
//# sourceMappingURL=useDomRect.js.map