import type { ReactNode } from "react";
export declare class ViewPortOutOfRangeError extends Error {
    readonly fallbackNode: ReactNode;
    constructor(fallbackNode: ReactNode);
}
export declare type ViewPortAdapterProps = {
    /**
     * May throw import { ViewPortOutOfRangeErrorÂ } from "powerhooks/ViewPortAdapter";
     * to specify a fallback screen on edge cases.
     */
    getConfig(props: {
        windowInnerWidth: number;
        windowInnerHeight: number;
        browserFontSizeFactor: number;
    }): {
        targetWindowInnerWidth: number;
        targetBrowserFontSizeFactor: number;
    };
    children: ReactNode;
};
export declare type ViewPortState = ReturnType<ViewPortAdapterProps["getConfig"]> & {
    targetWindowInnerHeight: number;
    zoomFactor: number;
};
export declare function useViewPortState(): {
    viewPortState: ViewPortState | undefined;
};
export declare function getIsPortraitOrientation(props: {
    windowInnerWidth: number;
    windowInnerHeight: number;
}): boolean;
export declare const chromeFontSizesFactors: {
    readonly "Very small": 0.5625;
    readonly Small: 0.75;
    readonly "Medium (Recommended)": 1;
    readonly Large: 1.25;
    readonly "Very Large": 1.5;
};
export declare type ChromeFontSize = keyof typeof chromeFontSizesFactors;
/**
 * WARNING: We assumes that html element font-size is not defined
 * or defined in percentages.
 */
export declare function ViewPortAdapter(props: ViewPortAdapterProps): JSX.Element;
