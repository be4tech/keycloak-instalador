{"ast":null,"code":"/**\n * NOTE: This is just a slightly modified version of the default adapter in keycloak-js\n * The goal here is just to be able to inject search param in url before keycloak redirect.\n * Our use case for it is to pass over the login screen the states of useGlobalState\n * namely isDarkModeEnabled, lgn...\n */\nexport function createKeycloakAdapter(params) {\n  const {\n    keycloakInstance,\n    transformUrlBeforeRedirect,\n    getRedirectMethod = () => \"overwrite location.href\"\n  } = params;\n  const neverResolvingPromise = Object.defineProperties(new Promise(() => {}), {\n    \"success\": {\n      \"value\": () => {}\n    },\n    \"error\": {\n      \"value\": () => {}\n    }\n  });\n  return {\n    \"login\": options => {\n      const newHref = transformUrlBeforeRedirect(keycloakInstance.createLoginUrl(options));\n      switch (getRedirectMethod()) {\n        case \"location.replace\":\n          window.location.replace(newHref);\n          break;\n        case \"overwrite location.href\":\n          window.location.href = newHref;\n          break;\n      }\n      return neverResolvingPromise;\n    },\n    \"register\": options => {\n      const newHref = transformUrlBeforeRedirect(keycloakInstance.createRegisterUrl(options));\n      switch (getRedirectMethod()) {\n        case \"location.replace\":\n          window.location.replace(newHref);\n          break;\n        case \"overwrite location.href\":\n          window.location.href = newHref;\n          break;\n      }\n      return neverResolvingPromise;\n    },\n    \"logout\": options => {\n      window.location.replace(transformUrlBeforeRedirect(keycloakInstance.createLogoutUrl(options)));\n      return neverResolvingPromise;\n    },\n    \"accountManagement\": () => {\n      const accountUrl = transformUrlBeforeRedirect(keycloakInstance.createAccountUrl());\n      if (accountUrl === \"undefined\") {\n        throw new Error(\"Not supported by the OIDC server\");\n      }\n      switch (getRedirectMethod()) {\n        case \"location.replace\":\n          window.location.replace(accountUrl);\n          break;\n        case \"overwrite location.href\":\n          window.location.href = accountUrl;\n          break;\n      }\n      return neverResolvingPromise;\n    },\n    \"redirectUri\": options => {\n      if (options && options.redirectUri) {\n        return options.redirectUri;\n      } else if (keycloakInstance.redirectUri) {\n        return keycloakInstance.redirectUri;\n      } else {\n        return window.location.href;\n      }\n    }\n  };\n}","map":{"version":3,"names":["createKeycloakAdapter","params","keycloakInstance","transformUrlBeforeRedirect","getRedirectMethod","neverResolvingPromise","Object","defineProperties","Promise","value","options","newHref","createLoginUrl","window","location","replace","href","createRegisterUrl","createLogoutUrl","accountManagement","accountUrl","createAccountUrl","Error","redirectUri"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/lib/keycloakJsAdapter.ts"],"sourcesContent":["export declare namespace keycloak_js {\n    export type KeycloakPromiseCallback<T> = (result: T) => void;\n    export class KeycloakPromise<TSuccess, TError> extends Promise<TSuccess> {\n        success(callback: KeycloakPromiseCallback<TSuccess>): KeycloakPromise<TSuccess, TError>;\n        error(callback: KeycloakPromiseCallback<TError>): KeycloakPromise<TSuccess, TError>;\n    }\n    export interface KeycloakAdapter {\n        login(options?: KeycloakLoginOptions): KeycloakPromise<void, void>;\n        logout(options?: KeycloakLogoutOptions): KeycloakPromise<void, void>;\n        register(options?: KeycloakLoginOptions): KeycloakPromise<void, void>;\n        accountManagement(): KeycloakPromise<void, void>;\n        redirectUri(options: { redirectUri: string }, encodeHash: boolean): string;\n    }\n    export interface KeycloakLogoutOptions {\n        redirectUri?: string;\n    }\n    export interface KeycloakLoginOptions {\n        scope?: string;\n        redirectUri?: string;\n        prompt?: \"none\" | \"login\";\n        action?: string;\n        maxAge?: number;\n        loginHint?: string;\n        idpHint?: string;\n        locale?: string;\n        cordovaOptions?: { [optionName: string]: string };\n    }\n\n    export type KeycloakInstance = Record<\n        \"createLoginUrl\" | \"createLogoutUrl\" | \"createRegisterUrl\",\n        (options: KeycloakLoginOptions | undefined) => string\n    > & {\n        createAccountUrl(): string;\n        redirectUri?: string;\n    };\n}\n\n/**\n * NOTE: This is just a slightly modified version of the default adapter in keycloak-js\n * The goal here is just to be able to inject search param in url before keycloak redirect.\n * Our use case for it is to pass over the login screen the states of useGlobalState\n * namely isDarkModeEnabled, lgn...\n */\nexport function createKeycloakAdapter(params: {\n    keycloakInstance: keycloak_js.KeycloakInstance;\n    transformUrlBeforeRedirect: (url: string) => string;\n    getRedirectMethod?: () => \"overwrite location.href\" | \"location.replace\";\n}): keycloak_js.KeycloakAdapter {\n    const { keycloakInstance, transformUrlBeforeRedirect, getRedirectMethod = () => \"overwrite location.href\" } = params;\n\n    const neverResolvingPromise: keycloak_js.KeycloakPromise<void, void> = Object.defineProperties(new Promise(() => {}), {\n        \"success\": { \"value\": () => {} },\n        \"error\": { \"value\": () => {} }\n    }) as any;\n\n    return {\n        \"login\": options => {\n            const newHref = transformUrlBeforeRedirect(keycloakInstance.createLoginUrl(options));\n            switch (getRedirectMethod()) {\n                case \"location.replace\":\n                    window.location.replace(newHref);\n                    break;\n                case \"overwrite location.href\":\n                    window.location.href = newHref;\n                    break;\n            }\n            return neverResolvingPromise;\n        },\n        \"register\": options => {\n            const newHref = transformUrlBeforeRedirect(keycloakInstance.createRegisterUrl(options));\n            switch (getRedirectMethod()) {\n                case \"location.replace\":\n                    window.location.replace(newHref);\n                    break;\n                case \"overwrite location.href\":\n                    window.location.href = newHref;\n                    break;\n            }\n\n            return neverResolvingPromise;\n        },\n        \"logout\": options => {\n            window.location.replace(transformUrlBeforeRedirect(keycloakInstance.createLogoutUrl(options)));\n            return neverResolvingPromise;\n        },\n        \"accountManagement\": () => {\n            const accountUrl = transformUrlBeforeRedirect(keycloakInstance.createAccountUrl());\n\n            if (accountUrl === \"undefined\") {\n                throw new Error(\"Not supported by the OIDC server\");\n            }\n\n            switch (getRedirectMethod()) {\n                case \"location.replace\":\n                    window.location.replace(accountUrl);\n                    break;\n                case \"overwrite location.href\":\n                    window.location.href = accountUrl;\n                    break;\n            }\n\n            return neverResolvingPromise;\n        },\n        \"redirectUri\": options => {\n            if (options && options.redirectUri) {\n                return options.redirectUri;\n            } else if (keycloakInstance.redirectUri) {\n                return keycloakInstance.redirectUri;\n            } else {\n                return window.location.href;\n            }\n        }\n    };\n}\n"],"mappings":"AAqCA;;;;;;AAMA,OAAM,SAAUA,qBAAqBA,CAACC,MAIrC;EACG,MAAM;IAAEC,gBAAgB;IAAEC,0BAA0B;IAAEC,iBAAiB,GAAGA,CAAA,KAAM;EAAyB,CAAE,GAAGH,MAAM;EAEpH,MAAMI,qBAAqB,GAA4CC,MAAM,CAACC,gBAAgB,CAAC,IAAIC,OAAO,CAAC,MAAK,CAAE,CAAC,CAAC,EAAE;IAClH,SAAS,EAAE;MAAE,OAAO,EAAEC,CAAA,KAAK,CAAE;IAAC,CAAE;IAChC,OAAO,EAAE;MAAE,OAAO,EAAEA,CAAA,KAAK,CAAE;IAAC;GAC/B,CAAQ;EAET,OAAO;IACH,OAAO,EAAEC,OAAO,IAAG;MACf,MAAMC,OAAO,GAAGR,0BAA0B,CAACD,gBAAgB,CAACU,cAAc,CAACF,OAAO,CAAC,CAAC;MACpF,QAAQN,iBAAiB,EAAE;QACvB,KAAK,kBAAkB;UACnBS,MAAM,CAACC,QAAQ,CAACC,OAAO,CAACJ,OAAO,CAAC;UAChC;QACJ,KAAK,yBAAyB;UAC1BE,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAGL,OAAO;UAC9B;;MAER,OAAON,qBAAqB;IAChC,CAAC;IACD,UAAU,EAAEK,OAAO,IAAG;MAClB,MAAMC,OAAO,GAAGR,0BAA0B,CAACD,gBAAgB,CAACe,iBAAiB,CAACP,OAAO,CAAC,CAAC;MACvF,QAAQN,iBAAiB,EAAE;QACvB,KAAK,kBAAkB;UACnBS,MAAM,CAACC,QAAQ,CAACC,OAAO,CAACJ,OAAO,CAAC;UAChC;QACJ,KAAK,yBAAyB;UAC1BE,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAGL,OAAO;UAC9B;;MAGR,OAAON,qBAAqB;IAChC,CAAC;IACD,QAAQ,EAAEK,OAAO,IAAG;MAChBG,MAAM,CAACC,QAAQ,CAACC,OAAO,CAACZ,0BAA0B,CAACD,gBAAgB,CAACgB,eAAe,CAACR,OAAO,CAAC,CAAC,CAAC;MAC9F,OAAOL,qBAAqB;IAChC,CAAC;IACD,mBAAmB,EAAEc,CAAA,KAAK;MACtB,MAAMC,UAAU,GAAGjB,0BAA0B,CAACD,gBAAgB,CAACmB,gBAAgB,EAAE,CAAC;MAElF,IAAID,UAAU,KAAK,WAAW,EAAE;QAC5B,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;;MAGvD,QAAQlB,iBAAiB,EAAE;QACvB,KAAK,kBAAkB;UACnBS,MAAM,CAACC,QAAQ,CAACC,OAAO,CAACK,UAAU,CAAC;UACnC;QACJ,KAAK,yBAAyB;UAC1BP,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAGI,UAAU;UACjC;;MAGR,OAAOf,qBAAqB;IAChC,CAAC;IACD,aAAa,EAAEK,OAAO,IAAG;MACrB,IAAIA,OAAO,IAAIA,OAAO,CAACa,WAAW,EAAE;QAChC,OAAOb,OAAO,CAACa,WAAW;OAC7B,MAAM,IAAIrB,gBAAgB,CAACqB,WAAW,EAAE;QACrC,OAAOrB,gBAAgB,CAACqB,WAAW;OACtC,MAAM;QACH,OAAOV,MAAM,CAACC,QAAQ,CAACE,IAAI;;IAEnC;GACH;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}