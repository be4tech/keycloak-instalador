{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useRef, useState } from \"react\";\nimport { clsx } from \"../../tools/clsx\";\nimport { base64url } from \"rfc4648\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { useGetClassName } from \"../../login/lib/useGetClassName\";\nimport { assert } from \"tsafe/assert\";\nimport { is } from \"tsafe/is\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport default function WebauthnAuthenticate(props) {\n  const {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    Template,\n    classes\n  } = props;\n  const {\n    getClassName\n  } = useGetClassName({\n    doUseDefaultCss,\n    classes\n  });\n  const {\n    url\n  } = kcContext;\n  const {\n    msg,\n    msgStr\n  } = i18n;\n  const {\n    authenticators,\n    challenge,\n    shouldDisplayAuthenticators,\n    userVerification,\n    rpId\n  } = kcContext;\n  const createTimeout = Number(kcContext.createTimeout);\n  const isUserIdentified = kcContext.isUserIdentified == \"true\";\n  const formElementRef = useRef(null);\n  const webAuthnAuthenticate = useConstCallback(async () => {\n    if (!isUserIdentified) {\n      return;\n    }\n    const submitForm = async () => {\n      const formElement = formElementRef.current;\n      if (formElement === null) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n        return submitForm();\n      }\n      formElement.submit();\n    };\n    const allowCredentials = authenticators.authenticators.map(authenticator => ({\n      id: base64url.parse(authenticator.credentialId, {\n        loose: true\n      }),\n      type: \"public-key\"\n    }));\n    // Check if WebAuthn is supported by this browser\n    if (!window.PublicKeyCredential) {\n      setError(msgStr(\"webauthn-unsupported-browser-text\"));\n      submitForm();\n      return;\n    }\n    const publicKey = {\n      rpId,\n      challenge: base64url.parse(challenge, {\n        loose: true\n      })\n    };\n    if (createTimeout !== 0) {\n      publicKey.timeout = createTimeout * 1000;\n    }\n    if (allowCredentials.length) {\n      publicKey.allowCredentials = allowCredentials;\n    }\n    if (userVerification !== \"not specified\") {\n      publicKey.userVerification = userVerification;\n    }\n    try {\n      const result = await navigator.credentials.get({\n        publicKey\n      });\n      if (!result || result.type != \"public-key\") {\n        return;\n      }\n      assert(is(result));\n      if (!(\"authenticatorData\" in result.response)) {\n        return;\n      }\n      const response = result.response;\n      const clientDataJSON = response.clientDataJSON;\n      assert(typeGuard(response, \"signature\" in response && response.authenticatorData instanceof ArrayBuffer), \"response not an AuthenticatorAssertionResponse\");\n      const authenticatorData = response.authenticatorData;\n      const signature = response.signature;\n      setClientDataJSON(base64url.stringify(new Uint8Array(clientDataJSON), {\n        \"pad\": false\n      }));\n      setAuthenticatorData(base64url.stringify(new Uint8Array(authenticatorData), {\n        \"pad\": false\n      }));\n      setSignature(base64url.stringify(new Uint8Array(signature), {\n        \"pad\": false\n      }));\n      setCredentialId(result.id);\n      setUserHandle(base64url.stringify(new Uint8Array(response.userHandle), {\n        \"pad\": false\n      }));\n    } catch (err) {\n      setError(String(err));\n    }\n    submitForm();\n  });\n  const [clientDataJSON, setClientDataJSON] = useState(\"\");\n  const [authenticatorData, setAuthenticatorData] = useState(\"\");\n  const [signature, setSignature] = useState(\"\");\n  const [credentialId, setCredentialId] = useState(\"\");\n  const [userHandle, setUserHandle] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  return _jsx(Template, Object.assign({}, {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    classes\n  }, {\n    headerNode: msg(\"webauthn-login-title\")\n  }, {\n    children: _jsxs(\"div\", Object.assign({\n      id: \"kc-form-webauthn\",\n      className: getClassName(\"kcFormClass\")\n    }, {\n      children: [_jsxs(\"form\", Object.assign({\n        id: \"webauth\",\n        action: url.loginAction,\n        ref: formElementRef,\n        method: \"post\"\n      }, {\n        children: [_jsx(\"input\", {\n          type: \"hidden\",\n          id: \"clientDataJSON\",\n          name: \"clientDataJSON\",\n          value: clientDataJSON\n        }), _jsx(\"input\", {\n          type: \"hidden\",\n          id: \"authenticatorData\",\n          name: \"authenticatorData\",\n          value: authenticatorData\n        }), _jsx(\"input\", {\n          type: \"hidden\",\n          id: \"signature\",\n          name: \"signature\",\n          value: signature\n        }), _jsx(\"input\", {\n          type: \"hidden\",\n          id: \"credentialId\",\n          name: \"credentialId\",\n          value: credentialId\n        }), _jsx(\"input\", {\n          type: \"hidden\",\n          id: \"userHandle\",\n          name: \"userHandle\",\n          value: userHandle\n        }), _jsx(\"input\", {\n          type: \"hidden\",\n          id: \"error\",\n          name: \"error\",\n          value: error\n        })]\n      })), _jsxs(\"div\", Object.assign({\n        className: getClassName(\"kcFormGroupClass\")\n      }, {\n        children: [authenticators && (() => _jsx(\"form\", Object.assign({\n          id: \"authn_select\",\n          className: getClassName(\"kcFormClass\")\n        }, {\n          children: authenticators.authenticators.map(authenticator => _jsx(\"input\", {\n            type: \"hidden\",\n            name: \"authn_use_chk\",\n            value: authenticator.credentialId\n          }, authenticator.credentialId))\n        })))(), authenticators && shouldDisplayAuthenticators && (() => _jsxs(_Fragment, {\n          children: [authenticators.authenticators.length > 1 && _jsx(\"p\", Object.assign({\n            className: getClassName(\"kcSelectAuthListItemTitle\")\n          }, {\n            children: msg(\"webauthn-available-authenticators\")\n          })), _jsx(\"div\", Object.assign({\n            className: getClassName(\"kcFormClass\")\n          }, {\n            children: authenticators.authenticators.map(authenticator => _jsxs(\"div\", Object.assign({\n              id: \"kc-webauthn-authenticator\",\n              className: getClassName(\"kcSelectAuthListItemClass\")\n            }, {\n              children: [_jsx(\"div\", Object.assign({\n                className: getClassName(\"kcSelectAuthListItemIconClass\")\n              }, {\n                children: _jsx(\"i\", {\n                  className: clsx((() => {\n                    const className = getClassName(authenticator.transports.iconClass);\n                    return className.includes(\" \") ? className : [className, getClassName(\"kcWebAuthnDefaultIcon\")];\n                  })(), getClassName(\"kcSelectAuthListItemIconPropertyClass\"))\n                })\n              })), _jsxs(\"div\", Object.assign({\n                className: getClassName(\"kcSelectAuthListItemBodyClass\")\n              }, {\n                children: [_jsx(\"div\", Object.assign({\n                  id: \"kc-webauthn-authenticator-label\",\n                  className: getClassName(\"kcSelectAuthListItemHeadingClass\")\n                }, {\n                  children: authenticator.label\n                })), authenticator.transports && authenticator.transports.displayNameProperties.length && _jsx(\"div\", Object.assign({\n                  id: \"kc-webauthn-authenticator-transport\",\n                  className: getClassName(\"kcSelectAuthListItemDescriptionClass\")\n                }, {\n                  children: authenticator.transports.displayNameProperties.map((transport, index) => _jsxs(_Fragment, {\n                    children: [_jsx(\"span\", {\n                      children: msg(transport)\n                    }), index < authenticator.transports.displayNameProperties.length - 1 && _jsx(\"span\", {\n                      children: \", \"\n                    })]\n                  }))\n                })), _jsxs(\"div\", Object.assign({\n                  className: getClassName(\"kcSelectAuthListItemDescriptionClass\")\n                }, {\n                  children: [_jsx(\"span\", Object.assign({\n                    id: \"kc-webauthn-authenticator-created-label\"\n                  }, {\n                    children: msg(\"webauthn-createdAt-label\")\n                  })), _jsx(\"span\", Object.assign({\n                    id: \"kc-webauthn-authenticator-created\"\n                  }, {\n                    children: authenticator.createdAt\n                  }))]\n                }))]\n              })), _jsx(\"div\", {\n                className: getClassName(\"kcSelectAuthListItemFillClass\")\n              })]\n            })))\n          }))]\n        }))(), _jsx(\"div\", Object.assign({\n          id: \"kc-form-buttons\",\n          className: getClassName(\"kcFormButtonsClass\")\n        }, {\n          children: _jsx(\"input\", {\n            id: \"authenticateWebAuthnButton\",\n            type: \"button\",\n            onClick: webAuthnAuthenticate,\n            autoFocus: true,\n            value: msgStr(\"webauthn-doAuthenticate\"),\n            className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonBlockClass\"), getClassName(\"kcButtonLargeClass\"))\n          })\n        }))]\n      }))]\n    }))\n  }));\n}","map":{"version":3,"names":["useRef","useState","clsx","base64url","useConstCallback","useGetClassName","assert","is","typeGuard","WebauthnAuthenticate","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","url","msg","msgStr","authenticators","challenge","shouldDisplayAuthenticators","userVerification","rpId","createTimeout","Number","isUserIdentified","formElementRef","webAuthnAuthenticate","submitForm","formElement","current","Promise","resolve","setTimeout","submit","allowCredentials","map","authenticator","id","parse","credentialId","loose","type","window","PublicKeyCredential","setError","publicKey","timeout","length","result","navigator","credentials","get","response","clientDataJSON","authenticatorData","ArrayBuffer","signature","setClientDataJSON","stringify","Uint8Array","setAuthenticatorData","setSignature","setCredentialId","setUserHandle","userHandle","err","String","error","_jsx","Object","assign","headerNode","children","_jsxs","className","action","loginAction","ref","method","name","value","_Fragment","transports","iconClass","includes","label","displayNameProperties","transport","index","createdAt","onClick","autoFocus"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/login/pages/WebauthnAuthenticate.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { MessageKey } from \"keycloakify/login/i18n/i18n\";\nimport { base64url } from \"rfc4648\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport { assert } from \"tsafe/assert\";\nimport { is } from \"tsafe/is\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport default function WebauthnAuthenticate(props: PageProps<Extract<KcContext, { pageId: \"webauthn-authenticate.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({ doUseDefaultCss, classes });\n\n    const { url } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { authenticators, challenge, shouldDisplayAuthenticators, userVerification, rpId } = kcContext;\n    const createTimeout = Number(kcContext.createTimeout);\n    const isUserIdentified = kcContext.isUserIdentified == \"true\";\n\n    const formElementRef = useRef<HTMLFormElement>(null);\n\n    const webAuthnAuthenticate = useConstCallback(async () => {\n        if (!isUserIdentified) {\n            return;\n        }\n\n        const submitForm = async (): Promise<void> => {\n            const formElement = formElementRef.current;\n\n            if (formElement === null) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                return submitForm();\n            }\n\n            formElement.submit();\n        };\n\n        const allowCredentials = authenticators.authenticators.map(\n            authenticator =>\n                ({\n                    id: base64url.parse(authenticator.credentialId, { loose: true }),\n                    type: \"public-key\"\n                } as PublicKeyCredentialDescriptor)\n        );\n        // Check if WebAuthn is supported by this browser\n        if (!window.PublicKeyCredential) {\n            setError(msgStr(\"webauthn-unsupported-browser-text\"));\n            submitForm();\n            return;\n        }\n\n        const publicKey: PublicKeyCredentialRequestOptions = {\n            rpId,\n            challenge: base64url.parse(challenge, { loose: true })\n        };\n\n        if (createTimeout !== 0) {\n            publicKey.timeout = createTimeout * 1000;\n        }\n\n        if (allowCredentials.length) {\n            publicKey.allowCredentials = allowCredentials;\n        }\n\n        if (userVerification !== \"not specified\") {\n            publicKey.userVerification = userVerification;\n        }\n\n        try {\n            const result = await navigator.credentials.get({ publicKey });\n            if (!result || result.type != \"public-key\") {\n                return;\n            }\n            assert(is<PublicKeyCredential>(result));\n            if (!(\"authenticatorData\" in result.response)) {\n                return;\n            }\n            const response = result.response;\n\n            const clientDataJSON = response.clientDataJSON;\n\n            assert(\n                typeGuard<AuthenticatorAssertionResponse>(response, \"signature\" in response && response.authenticatorData instanceof ArrayBuffer),\n                \"response not an AuthenticatorAssertionResponse\"\n            );\n\n            const authenticatorData = response.authenticatorData;\n            const signature = response.signature;\n\n            setClientDataJSON(base64url.stringify(new Uint8Array(clientDataJSON), { \"pad\": false }));\n            setAuthenticatorData(base64url.stringify(new Uint8Array(authenticatorData), { \"pad\": false }));\n            setSignature(base64url.stringify(new Uint8Array(signature), { \"pad\": false }));\n            setCredentialId(result.id);\n            setUserHandle(base64url.stringify(new Uint8Array(response.userHandle!), { \"pad\": false }));\n        } catch (err) {\n            setError(String(err));\n        }\n\n        submitForm();\n    });\n\n    const [clientDataJSON, setClientDataJSON] = useState(\"\");\n    const [authenticatorData, setAuthenticatorData] = useState(\"\");\n    const [signature, setSignature] = useState(\"\");\n    const [credentialId, setCredentialId] = useState(\"\");\n    const [userHandle, setUserHandle] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} headerNode={msg(\"webauthn-login-title\")}>\n            <div id=\"kc-form-webauthn\" className={getClassName(\"kcFormClass\")}>\n                <form id=\"webauth\" action={url.loginAction} ref={formElementRef} method=\"post\">\n                    <input type=\"hidden\" id=\"clientDataJSON\" name=\"clientDataJSON\" value={clientDataJSON} />\n                    <input type=\"hidden\" id=\"authenticatorData\" name=\"authenticatorData\" value={authenticatorData} />\n                    <input type=\"hidden\" id=\"signature\" name=\"signature\" value={signature} />\n                    <input type=\"hidden\" id=\"credentialId\" name=\"credentialId\" value={credentialId} />\n                    <input type=\"hidden\" id=\"userHandle\" name=\"userHandle\" value={userHandle} />\n                    <input type=\"hidden\" id=\"error\" name=\"error\" value={error} />\n                </form>\n                <div className={getClassName(\"kcFormGroupClass\")}>\n                    {authenticators &&\n                        (() => (\n                            <form id=\"authn_select\" className={getClassName(\"kcFormClass\")}>\n                                {authenticators.authenticators.map(authenticator => (\n                                    <input type=\"hidden\" name=\"authn_use_chk\" value={authenticator.credentialId} key={authenticator.credentialId} />\n                                ))}\n                            </form>\n                        ))()}\n                    {authenticators &&\n                        shouldDisplayAuthenticators &&\n                        (() => (\n                            <>\n                                {authenticators.authenticators.length > 1 && (\n                                    <p className={getClassName(\"kcSelectAuthListItemTitle\")}>{msg(\"webauthn-available-authenticators\")}</p>\n                                )}\n                                <div className={getClassName(\"kcFormClass\")}>\n                                    {authenticators.authenticators.map(authenticator => (\n                                        <div id=\"kc-webauthn-authenticator\" className={getClassName(\"kcSelectAuthListItemClass\")}>\n                                            <div className={getClassName(\"kcSelectAuthListItemIconClass\")}>\n                                                <i\n                                                    className={clsx(\n                                                        (() => {\n                                                            const className = getClassName(authenticator.transports.iconClass as any);\n                                                            return className.includes(\" \")\n                                                                ? className\n                                                                : [className, getClassName(\"kcWebAuthnDefaultIcon\")];\n                                                        })(),\n                                                        getClassName(\"kcSelectAuthListItemIconPropertyClass\")\n                                                    )}\n                                                />\n                                            </div>\n                                            <div className={getClassName(\"kcSelectAuthListItemBodyClass\")}>\n                                                <div\n                                                    id=\"kc-webauthn-authenticator-label\"\n                                                    className={getClassName(\"kcSelectAuthListItemHeadingClass\")}\n                                                >\n                                                    {authenticator.label}\n                                                </div>\n\n                                                {authenticator.transports && authenticator.transports.displayNameProperties.length && (\n                                                    <div\n                                                        id=\"kc-webauthn-authenticator-transport\"\n                                                        className={getClassName(\"kcSelectAuthListItemDescriptionClass\")}\n                                                    >\n                                                        {authenticator.transports.displayNameProperties.map(\n                                                            (transport: MessageKey, index: number) => (\n                                                                <>\n                                                                    <span>{msg(transport)}</span>\n                                                                    {index < authenticator.transports.displayNameProperties.length - 1 && (\n                                                                        <span>{\", \"}</span>\n                                                                    )}\n                                                                </>\n                                                            )\n                                                        )}\n                                                    </div>\n                                                )}\n\n                                                <div className={getClassName(\"kcSelectAuthListItemDescriptionClass\")}>\n                                                    <span id=\"kc-webauthn-authenticator-created-label\">{msg(\"webauthn-createdAt-label\")}</span>\n                                                    <span id=\"kc-webauthn-authenticator-created\">{authenticator.createdAt}</span>\n                                                </div>\n                                            </div>\n                                            <div className={getClassName(\"kcSelectAuthListItemFillClass\")} />\n                                        </div>\n                                    ))}\n                                </div>\n                            </>\n                        ))()}\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            id=\"authenticateWebAuthnButton\"\n                            type=\"button\"\n                            onClick={webAuthnAuthenticate}\n                            autoFocus={true}\n                            value={msgStr(\"webauthn-doAuthenticate\")}\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                        />\n                    </div>\n                </div>\n            </div>\n        </Template>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}