{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, Fragment } from \"react\";\nimport { clsx } from \"../../../tools/clsx\";\nimport { useFormValidation } from \"../../../login/lib/useFormValidation\";\nexport function UserProfileFormFields(props) {\n  const {\n    kcContext,\n    onIsFormSubmittableValueChange,\n    i18n,\n    getClassName,\n    BeforeField,\n    AfterField\n  } = props;\n  const {\n    advancedMsg,\n    msg\n  } = i18n;\n  const {\n    formValidationState: {\n      fieldStateByAttributeName,\n      isFormSubmittable\n    },\n    formValidationDispatch,\n    attributesWithPassword\n  } = useFormValidation({\n    kcContext,\n    i18n\n  });\n  useEffect(() => {\n    onIsFormSubmittableValueChange(isFormSubmittable);\n  }, [isFormSubmittable]);\n  let currentGroup = \"\";\n  return _jsx(_Fragment, {\n    children: attributesWithPassword.map((attribute, i) => {\n      var _a;\n      const {\n        group = \"\",\n        groupDisplayHeader = \"\",\n        groupDisplayDescription = \"\"\n      } = attribute;\n      const {\n        value,\n        displayableErrors\n      } = fieldStateByAttributeName[attribute.name];\n      const formGroupClassName = clsx(getClassName(\"kcFormGroupClass\"), displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\"));\n      return _jsxs(Fragment, {\n        children: [group !== currentGroup && (currentGroup = group) !== \"\" && _jsxs(\"div\", Object.assign({\n          className: formGroupClassName\n        }, {\n          children: [_jsx(\"div\", Object.assign({\n            className: getClassName(\"kcContentWrapperClass\")\n          }, {\n            children: _jsx(\"label\", Object.assign({\n              id: `header-${group}`,\n              className: getClassName(\"kcFormGroupHeader\")\n            }, {\n              children: advancedMsg(groupDisplayHeader) || currentGroup\n            }))\n          })), groupDisplayDescription !== \"\" && _jsx(\"div\", Object.assign({\n            className: getClassName(\"kcLabelWrapperClass\")\n          }, {\n            children: _jsx(\"label\", Object.assign({\n              id: `description-${group}`,\n              className: getClassName(\"kcLabelClass\")\n            }, {\n              children: advancedMsg(groupDisplayDescription)\n            }))\n          }))]\n        })), BeforeField && _jsx(BeforeField, {\n          attribute: attribute\n        }), _jsxs(\"div\", Object.assign({\n          className: formGroupClassName\n        }, {\n          children: [_jsxs(\"div\", Object.assign({\n            className: getClassName(\"kcLabelWrapperClass\")\n          }, {\n            children: [_jsx(\"label\", Object.assign({\n              htmlFor: attribute.name,\n              className: getClassName(\"kcLabelClass\")\n            }, {\n              children: advancedMsg((_a = attribute.displayName) !== null && _a !== void 0 ? _a : \"\")\n            })), attribute.required && _jsx(_Fragment, {\n              children: \"*\"\n            })]\n          })), _jsxs(\"div\", Object.assign({\n            className: getClassName(\"kcInputWrapperClass\")\n          }, {\n            children: [(() => {\n              const {\n                options\n              } = attribute.validators;\n              if (options !== undefined) {\n                return _jsx(\"select\", Object.assign({\n                  id: attribute.name,\n                  name: attribute.name,\n                  onChange: event => formValidationDispatch({\n                    \"action\": \"update value\",\n                    \"name\": attribute.name,\n                    \"newValue\": event.target.value\n                  }),\n                  onBlur: () => formValidationDispatch({\n                    \"action\": \"focus lost\",\n                    \"name\": attribute.name\n                  }),\n                  value: value\n                }, {\n                  children: _jsxs(_Fragment, {\n                    children: [_jsx(\"option\", Object.assign({\n                      value: \"\",\n                      selected: true,\n                      disabled: true,\n                      hidden: true\n                    }, {\n                      children: msg(\"selectAnOption\")\n                    })), options.options.map(option => _jsx(\"option\", Object.assign({\n                      value: option\n                    }, {\n                      children: option\n                    }), option))]\n                  })\n                }));\n              }\n              return _jsx(\"input\", {\n                type: (() => {\n                  switch (attribute.name) {\n                    case \"password-confirm\":\n                    case \"password\":\n                      return \"password\";\n                    default:\n                      return \"text\";\n                  }\n                })(),\n                id: attribute.name,\n                name: attribute.name,\n                value: value,\n                onChange: event => formValidationDispatch({\n                  \"action\": \"update value\",\n                  \"name\": attribute.name,\n                  \"newValue\": event.target.value\n                }),\n                onBlur: () => formValidationDispatch({\n                  \"action\": \"focus lost\",\n                  \"name\": attribute.name\n                }),\n                className: getClassName(\"kcInputClass\"),\n                \"aria-invalid\": displayableErrors.length !== 0,\n                disabled: attribute.readOnly,\n                autoComplete: attribute.autocomplete\n              });\n            })(), displayableErrors.length !== 0 && (() => {\n              const divId = `input-error-${attribute.name}`;\n              return _jsxs(_Fragment, {\n                children: [_jsx(\"style\", {\n                  children: `#${divId} > span: { display: block; }`\n                }), _jsx(\"span\", Object.assign({\n                  id: divId,\n                  className: getClassName(\"kcInputErrorMessageClass\"),\n                  style: {\n                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                  },\n                  \"aria-live\": \"polite\"\n                }, {\n                  children: displayableErrors.map(_ref => {\n                    let {\n                      errorMessage\n                    } = _ref;\n                    return errorMessage;\n                  })\n                }))]\n              });\n            })()]\n          }))]\n        })), AfterField && _jsx(AfterField, {\n          attribute: attribute\n        })]\n      }, i);\n    })\n  });\n}","map":{"version":3,"names":["useEffect","Fragment","clsx","useFormValidation","UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","currentGroup","_jsx","_Fragment","children","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","value","displayableErrors","name","formGroupClassName","length","_jsxs","Object","assign","className","id","htmlFor","_a","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","disabled","hidden","option","type","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/login/pages/shared/UserProfileFormFields.tsx"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}