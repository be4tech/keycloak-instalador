{"ast":null,"code":"import { useReducer, useEffect } from \"react\";\nimport { headInsert } from \"../tools/headInsert\";\nimport { pathJoin } from \"../bin/tools/pathJoin\";\nimport { clsx } from \"../tools/clsx\";\nexport function usePrepareTemplate(params) {\n  const {\n    doFetchDefaultThemeResources,\n    stylesCommon = [],\n    styles = [],\n    url,\n    scripts = [],\n    htmlClassName,\n    bodyClassName\n  } = params;\n  const [isReady, setReady] = useReducer(() => true, !doFetchDefaultThemeResources);\n  useEffect(() => {\n    if (!doFetchDefaultThemeResources) {\n      return;\n    }\n    let isUnmounted = false;\n    const removeArray = [];\n    (async () => {\n      const prLoadedArray = [];\n      [...stylesCommon.map(relativePath => pathJoin(url.resourcesCommonPath, relativePath)), ...styles.map(relativePath => pathJoin(url.resourcesPath, relativePath))].reverse().forEach(href => {\n        const {\n          prLoaded,\n          remove\n        } = headInsert({\n          \"type\": \"css\",\n          \"position\": \"prepend\",\n          href\n        });\n        removeArray.push(remove);\n        prLoadedArray.push(prLoaded);\n      });\n      await Promise.all(prLoadedArray);\n      if (isUnmounted) {\n        return;\n      }\n      setReady();\n    })();\n    scripts.forEach(relativePath => {\n      const {\n        remove\n      } = headInsert({\n        \"type\": \"javascript\",\n        \"src\": pathJoin(url.resourcesPath, relativePath)\n      });\n      removeArray.push(remove);\n    });\n    return () => {\n      isUnmounted = true;\n      removeArray.forEach(remove => remove());\n    };\n  }, []);\n  useSetClassName({\n    \"target\": \"html\",\n    \"className\": htmlClassName\n  });\n  useSetClassName({\n    \"target\": \"body\",\n    \"className\": bodyClassName\n  });\n  return {\n    isReady\n  };\n}\nfunction useSetClassName(params) {\n  const {\n    target,\n    className\n  } = params;\n  useEffect(() => {\n    if (className === undefined) {\n      return;\n    }\n    const htmlClassList = document.getElementsByTagName(target)[0].classList;\n    const tokens = clsx(className).split(\" \");\n    htmlClassList.add(...tokens);\n    return () => {\n      htmlClassList.remove(...tokens);\n    };\n  }, [className]);\n}","map":{"version":3,"names":["useReducer","useEffect","headInsert","pathJoin","clsx","usePrepareTemplate","params","doFetchDefaultThemeResources","stylesCommon","styles","url","scripts","htmlClassName","bodyClassName","isReady","setReady","isUnmounted","removeArray","prLoadedArray","map","relativePath","resourcesCommonPath","resourcesPath","reverse","forEach","href","prLoaded","remove","push","Promise","all","useSetClassName","target","className","undefined","htmlClassList","document","getElementsByTagName","classList","tokens","split","add"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/lib/usePrepareTemplate.ts"],"sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport { headInsert } from \"keycloakify/tools/headInsert\";\nimport { pathJoin } from \"keycloakify/bin/tools/pathJoin\";\nimport { clsx } from \"keycloakify/tools/clsx\";\n\nexport function usePrepareTemplate(params: {\n    doFetchDefaultThemeResources: boolean;\n    stylesCommon?: string[];\n    styles?: string[];\n    scripts?: string[];\n    url: {\n        resourcesCommonPath: string;\n        resourcesPath: string;\n    };\n    htmlClassName: string | undefined;\n    bodyClassName: string | undefined;\n}) {\n    const { doFetchDefaultThemeResources, stylesCommon = [], styles = [], url, scripts = [], htmlClassName, bodyClassName } = params;\n\n    const [isReady, setReady] = useReducer(() => true, !doFetchDefaultThemeResources);\n\n    useEffect(() => {\n        if (!doFetchDefaultThemeResources) {\n            return;\n        }\n\n        let isUnmounted = false;\n\n        const removeArray: (() => void)[] = [];\n\n        (async () => {\n            const prLoadedArray: Promise<void>[] = [];\n\n            [\n                ...stylesCommon.map(relativePath => pathJoin(url.resourcesCommonPath, relativePath)),\n                ...styles.map(relativePath => pathJoin(url.resourcesPath, relativePath))\n            ]\n                .reverse()\n                .forEach(href => {\n                    const { prLoaded, remove } = headInsert({\n                        \"type\": \"css\",\n                        \"position\": \"prepend\",\n                        href\n                    });\n\n                    removeArray.push(remove);\n\n                    prLoadedArray.push(prLoaded);\n                });\n\n            await Promise.all(prLoadedArray);\n\n            if (isUnmounted) {\n                return;\n            }\n\n            setReady();\n        })();\n\n        scripts.forEach(relativePath => {\n            const { remove } = headInsert({\n                \"type\": \"javascript\",\n                \"src\": pathJoin(url.resourcesPath, relativePath)\n            });\n\n            removeArray.push(remove);\n        });\n\n        return () => {\n            isUnmounted = true;\n            removeArray.forEach(remove => remove());\n        };\n    }, []);\n\n    useSetClassName({\n        \"target\": \"html\",\n        \"className\": htmlClassName\n    });\n\n    useSetClassName({\n        \"target\": \"body\",\n        \"className\": bodyClassName\n    });\n\n    return { isReady };\n}\n\nfunction useSetClassName(params: { target: \"html\" | \"body\"; className: string | undefined }) {\n    const { target, className } = params;\n\n    useEffect(() => {\n        if (className === undefined) {\n            return;\n        }\n\n        const htmlClassList = document.getElementsByTagName(target)[0].classList;\n\n        const tokens = clsx(className).split(\" \");\n\n        htmlClassList.add(...tokens);\n\n        return () => {\n            htmlClassList.remove(...tokens);\n        };\n    }, [className]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}