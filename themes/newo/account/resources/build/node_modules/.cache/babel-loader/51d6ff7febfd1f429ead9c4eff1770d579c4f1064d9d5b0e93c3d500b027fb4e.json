{"ast":null,"code":"import { kcContextMocks, kcContextCommonMock } from \"./kcContextMocks\";\nimport { deepAssign } from \"../../tools/deepAssign\";\nimport { id } from \"tsafe/id\";\nimport { exclude } from \"tsafe/exclude\";\nimport { assert } from \"tsafe/assert\";\nimport { getKcContextFromWindow } from \"./getKcContextFromWindow\";\nimport { pathJoin } from \"../../bin/tools/pathJoin\";\nimport { pathBasename } from \"../../tools/pathBasename\";\nimport { resourcesCommonDirPathRelativeToPublicDir } from \"../../bin/mockTestingResourcesPath\";\nimport { symToStr } from \"tsafe/symToStr\";\nexport function createGetKcContext(params) {\n  const {\n    mockData\n  } = params !== null && params !== void 0 ? params : {};\n  function getKcContext(params) {\n    var _a, _b;\n    const {\n      mockPageId,\n      storyPartialKcContext\n    } = params !== null && params !== void 0 ? params : {};\n    const realKcContext = getKcContextFromWindow();\n    if (mockPageId !== undefined && realKcContext === undefined) {\n      //TODO maybe trow if no mock fo custom page\n      console.log(`%cKeycloakify: ${symToStr({\n        mockPageId\n      })} set to ${mockPageId}.`, \"background: red; color: yellow; font-size: medium\");\n      const kcContextDefaultMock = kcContextMocks.find(_ref => {\n        let {\n          pageId\n        } = _ref;\n        return pageId === mockPageId;\n      });\n      const partialKcContextCustomMock = (() => {\n        const out = {};\n        const mockDataPick = mockData === null || mockData === void 0 ? void 0 : mockData.find(_ref2 => {\n          let {\n            pageId\n          } = _ref2;\n          return pageId === mockPageId;\n        });\n        if (mockDataPick !== undefined) {\n          deepAssign({\n            \"target\": out,\n            \"source\": mockDataPick\n          });\n        }\n        if (storyPartialKcContext !== undefined) {\n          deepAssign({\n            \"target\": out,\n            \"source\": storyPartialKcContext\n          });\n        }\n        return Object.keys(out).length === 0 ? undefined : out;\n      })();\n      if (kcContextDefaultMock === undefined && partialKcContextCustomMock === undefined) {\n        console.warn([`WARNING: You declared the non build in page ${mockPageId} but you didn't `, `provide mock data needed to debug the page outside of Keycloak as you are trying to do now.`, `Please check the documentation of the getKcContext function`].join(\"\\n\"));\n      }\n      const kcContext = {};\n      deepAssign({\n        \"target\": kcContext,\n        \"source\": kcContextDefaultMock !== undefined ? kcContextDefaultMock : Object.assign({\n          \"pageId\": mockPageId\n        }, kcContextCommonMock)\n      });\n      if (partialKcContextCustomMock !== undefined) {\n        deepAssign({\n          \"target\": kcContext,\n          \"source\": partialKcContextCustomMock\n        });\n        if (partialKcContextCustomMock.pageId === \"register-user-profile.ftl\" || partialKcContextCustomMock.pageId === \"update-user-profile.ftl\" || partialKcContextCustomMock.pageId === \"idp-review-user-profile.ftl\") {\n          assert((kcContextDefaultMock === null || kcContextDefaultMock === void 0 ? void 0 : kcContextDefaultMock.pageId) === \"register-user-profile.ftl\" || (kcContextDefaultMock === null || kcContextDefaultMock === void 0 ? void 0 : kcContextDefaultMock.pageId) === \"update-user-profile.ftl\" || (kcContextDefaultMock === null || kcContextDefaultMock === void 0 ? void 0 : kcContextDefaultMock.pageId) === \"idp-review-user-profile.ftl\");\n          const {\n            attributes\n          } = kcContextDefaultMock.profile;\n          id(kcContext).profile.attributes = [];\n          id(kcContext).profile.attributesByName = {};\n          const partialAttributes = [...((_b = (_a = partialKcContextCustomMock.profile) === null || _a === void 0 ? void 0 : _a.attributes) !== null && _b !== void 0 ? _b : [])].filter(exclude(undefined));\n          attributes.forEach(attribute => {\n            const partialAttribute = partialAttributes.find(_ref3 => {\n              let {\n                name\n              } = _ref3;\n              return name === attribute.name;\n            });\n            const augmentedAttribute = {};\n            deepAssign({\n              \"target\": augmentedAttribute,\n              \"source\": attribute\n            });\n            if (partialAttribute !== undefined) {\n              partialAttributes.splice(partialAttributes.indexOf(partialAttribute), 1);\n              deepAssign({\n                \"target\": augmentedAttribute,\n                \"source\": partialAttribute\n              });\n            }\n            id(kcContext).profile.attributes.push(augmentedAttribute);\n            id(kcContext).profile.attributesByName[augmentedAttribute.name] = augmentedAttribute;\n          });\n          partialAttributes.map(partialAttribute => Object.assign({\n            \"validators\": {}\n          }, partialAttribute)).forEach(partialAttribute => {\n            const {\n              name\n            } = partialAttribute;\n            assert(name !== undefined, \"If you define a mock attribute it must have at least a name\");\n            id(kcContext).profile.attributes.push(partialAttribute);\n            id(kcContext).profile.attributesByName[name] = partialAttribute;\n          });\n        }\n      }\n      return {\n        kcContext\n      };\n    }\n    if (realKcContext === undefined) {\n      return {\n        \"kcContext\": undefined\n      };\n    }\n    if (realKcContext.themeType !== \"login\") {\n      return {\n        \"kcContext\": undefined\n      };\n    }\n    {\n      const {\n        url\n      } = realKcContext;\n      url.resourcesCommonPath = pathJoin(url.resourcesPath, pathBasename(resourcesCommonDirPathRelativeToPublicDir));\n    }\n    return {\n      \"kcContext\": realKcContext\n    };\n  }\n  return {\n    getKcContext\n  };\n}","map":{"version":3,"names":["kcContextMocks","kcContextCommonMock","deepAssign","id","exclude","assert","getKcContextFromWindow","pathJoin","pathBasename","resourcesCommonDirPathRelativeToPublicDir","symToStr","createGetKcContext","params","mockData","getKcContext","mockPageId","storyPartialKcContext","realKcContext","undefined","console","log","kcContextDefaultMock","find","_ref","pageId","partialKcContextCustomMock","out","mockDataPick","_ref2","Object","keys","length","warn","join","kcContext","assign","attributes","profile","attributesByName","partialAttributes","_b","_a","filter","forEach","attribute","partialAttribute","_ref3","name","augmentedAttribute","splice","indexOf","push","map","themeType","url","resourcesCommonPath","resourcesPath"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/login/kcContext/createGetKcContext.ts"],"sourcesContent":["import type { KcContext, Attribute } from \"./KcContext\";\nimport { kcContextMocks, kcContextCommonMock } from \"./kcContextMocks\";\nimport type { DeepPartial } from \"keycloakify/tools/DeepPartial\";\nimport { deepAssign } from \"keycloakify/tools/deepAssign\";\nimport { id } from \"tsafe/id\";\nimport { exclude } from \"tsafe/exclude\";\nimport { assert } from \"tsafe/assert\";\nimport type { ExtendKcContext } from \"./getKcContextFromWindow\";\nimport { getKcContextFromWindow } from \"./getKcContextFromWindow\";\nimport { pathJoin } from \"keycloakify/bin/tools/pathJoin\";\nimport { pathBasename } from \"keycloakify/tools/pathBasename\";\nimport { resourcesCommonDirPathRelativeToPublicDir } from \"keycloakify/bin/mockTestingResourcesPath\";\nimport { symToStr } from \"tsafe/symToStr\";\n\nexport function createGetKcContext<KcContextExtension extends { pageId: string } = never>(params?: {\n    mockData?: readonly DeepPartial<ExtendKcContext<KcContextExtension>>[];\n}) {\n    const { mockData } = params ?? {};\n\n    function getKcContext<PageId extends ExtendKcContext<KcContextExtension>[\"pageId\"] | undefined = undefined>(params?: {\n        mockPageId?: PageId;\n        storyPartialKcContext?: DeepPartial<Extract<ExtendKcContext<KcContextExtension>, { pageId: PageId }>>;\n    }): {\n        kcContext: PageId extends undefined\n            ? ExtendKcContext<KcContextExtension> | undefined\n            : Extract<ExtendKcContext<KcContextExtension>, { pageId: PageId }>;\n    } {\n        const { mockPageId, storyPartialKcContext } = params ?? {};\n\n        const realKcContext = getKcContextFromWindow<KcContextExtension>();\n\n        if (mockPageId !== undefined && realKcContext === undefined) {\n            //TODO maybe trow if no mock fo custom page\n\n            console.log(`%cKeycloakify: ${symToStr({ mockPageId })} set to ${mockPageId}.`, \"background: red; color: yellow; font-size: medium\");\n\n            const kcContextDefaultMock = kcContextMocks.find(({ pageId }) => pageId === mockPageId);\n\n            const partialKcContextCustomMock = (() => {\n                const out: DeepPartial<ExtendKcContext<KcContextExtension>> = {};\n\n                const mockDataPick = mockData?.find(({ pageId }) => pageId === mockPageId);\n\n                if (mockDataPick !== undefined) {\n                    deepAssign({\n                        \"target\": out,\n                        \"source\": mockDataPick\n                    });\n                }\n\n                if (storyPartialKcContext !== undefined) {\n                    deepAssign({\n                        \"target\": out,\n                        \"source\": storyPartialKcContext\n                    });\n                }\n\n                return Object.keys(out).length === 0 ? undefined : out;\n            })();\n\n            if (kcContextDefaultMock === undefined && partialKcContextCustomMock === undefined) {\n                console.warn(\n                    [\n                        `WARNING: You declared the non build in page ${mockPageId} but you didn't `,\n                        `provide mock data needed to debug the page outside of Keycloak as you are trying to do now.`,\n                        `Please check the documentation of the getKcContext function`\n                    ].join(\"\\n\")\n                );\n            }\n\n            const kcContext: any = {};\n\n            deepAssign({\n                \"target\": kcContext,\n                \"source\": kcContextDefaultMock !== undefined ? kcContextDefaultMock : { \"pageId\": mockPageId, ...kcContextCommonMock }\n            });\n\n            if (partialKcContextCustomMock !== undefined) {\n                deepAssign({\n                    \"target\": kcContext,\n                    \"source\": partialKcContextCustomMock\n                });\n\n                if (\n                    partialKcContextCustomMock.pageId === \"register-user-profile.ftl\" ||\n                    partialKcContextCustomMock.pageId === \"update-user-profile.ftl\" ||\n                    partialKcContextCustomMock.pageId === \"idp-review-user-profile.ftl\"\n                ) {\n                    assert(\n                        kcContextDefaultMock?.pageId === \"register-user-profile.ftl\" ||\n                            kcContextDefaultMock?.pageId === \"update-user-profile.ftl\" ||\n                            kcContextDefaultMock?.pageId === \"idp-review-user-profile.ftl\"\n                    );\n\n                    const { attributes } = kcContextDefaultMock.profile;\n\n                    id<KcContext.RegisterUserProfile>(kcContext).profile.attributes = [];\n                    id<KcContext.RegisterUserProfile>(kcContext).profile.attributesByName = {};\n\n                    const partialAttributes = [\n                        ...((partialKcContextCustomMock as DeepPartial<KcContext.RegisterUserProfile>).profile?.attributes ?? [])\n                    ].filter(exclude(undefined));\n\n                    attributes.forEach(attribute => {\n                        const partialAttribute = partialAttributes.find(({ name }) => name === attribute.name);\n\n                        const augmentedAttribute: Attribute = {} as any;\n\n                        deepAssign({\n                            \"target\": augmentedAttribute,\n                            \"source\": attribute\n                        });\n\n                        if (partialAttribute !== undefined) {\n                            partialAttributes.splice(partialAttributes.indexOf(partialAttribute), 1);\n\n                            deepAssign({\n                                \"target\": augmentedAttribute,\n                                \"source\": partialAttribute\n                            });\n                        }\n\n                        id<KcContext.RegisterUserProfile>(kcContext).profile.attributes.push(augmentedAttribute);\n                        id<KcContext.RegisterUserProfile>(kcContext).profile.attributesByName[augmentedAttribute.name] = augmentedAttribute;\n                    });\n\n                    partialAttributes\n                        .map(partialAttribute => ({ \"validators\": {}, ...partialAttribute }))\n                        .forEach(partialAttribute => {\n                            const { name } = partialAttribute;\n\n                            assert(name !== undefined, \"If you define a mock attribute it must have at least a name\");\n\n                            id<KcContext.RegisterUserProfile>(kcContext).profile.attributes.push(partialAttribute as any);\n                            id<KcContext.RegisterUserProfile>(kcContext).profile.attributesByName[name] = partialAttribute as any;\n                        });\n                }\n            }\n\n            return { kcContext };\n        }\n\n        if (realKcContext === undefined) {\n            return { \"kcContext\": undefined as any };\n        }\n\n        if (realKcContext.themeType !== \"login\") {\n            return { \"kcContext\": undefined as any };\n        }\n\n        {\n            const { url } = realKcContext;\n\n            url.resourcesCommonPath = pathJoin(url.resourcesPath, pathBasename(resourcesCommonDirPathRelativeToPublicDir));\n        }\n\n        return { \"kcContext\": realKcContext as any };\n    }\n\n    return { getKcContext };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}