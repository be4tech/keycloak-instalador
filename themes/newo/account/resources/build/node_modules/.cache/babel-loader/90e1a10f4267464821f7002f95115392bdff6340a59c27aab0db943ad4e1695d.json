{"ast":null,"code":"import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport const clsx = function () {\n  const len = arguments.length;\n  let i = 0;\n  let cls = \"\";\n  for (; i < len; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (arg == null) continue;\n    let toAdd;\n    switch (typeof arg) {\n      case \"boolean\":\n        break;\n      case \"object\":\n        {\n          if (Array.isArray(arg)) {\n            toAdd = clsx(...arg);\n          } else {\n            assert(!typeGuard(arg, false));\n            toAdd = \"\";\n            for (const k in arg) {\n              if (arg[k] && k) {\n                toAdd && (toAdd += \" \");\n                toAdd += k;\n              }\n            }\n          }\n          break;\n        }\n      default:\n        {\n          toAdd = arg;\n        }\n    }\n    if (toAdd) {\n      cls && (cls += \" \");\n      cls += toAdd;\n    }\n  }\n  return cls;\n};","map":{"version":3,"names":["assert","typeGuard","clsx","len","arguments","length","i","cls","arg","undefined","toAdd","Array","isArray","k"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/tools/clsx.ts"],"sourcesContent":["import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;AACrC,SAASC,SAAS,QAAQ,iBAAiB;AAI3C,OAAO,MAAMC,IAAI,GAAG,SAAAA,CAAA,EAA6B;EAC7C,MAAMC,GAAG,GAAGC,SAAA,CAAKC,MAAM;EACvB,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,GAAG,GAAG,EAAE;EACZ,OAAOD,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;IACjB,MAAME,GAAG,GAAQF,CAAC,QAAAF,SAAA,CAAAC,MAAA,IAADC,CAAC,GAAAG,SAAA,GAAAL,SAAA,CAADE,CAAC,CAAC;IACnB,IAAIE,GAAG,IAAI,IAAI,EAAE;IAEjB,IAAIE,KAAK;IACT,QAAQ,OAAOF,GAAG;MACd,KAAK,SAAS;QACV;MACJ,KAAK,QAAQ;QAAE;UACX,IAAIG,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;YACpBE,KAAK,GAAGR,IAAI,CAAC,GAAGM,GAAG,CAAC;WACvB,MAAM;YACHR,MAAM,CAAC,CAACC,SAAS,CAAqBO,GAAG,EAAE,KAAK,CAAC,CAAC;YAElDE,KAAK,GAAG,EAAE;YACV,KAAK,MAAMG,CAAC,IAAIL,GAAG,EAAE;cACjB,IAAIA,GAAG,CAACK,CAAW,CAAC,IAAIA,CAAC,EAAE;gBACvBH,KAAK,KAAKA,KAAK,IAAI,GAAG,CAAC;gBACvBA,KAAK,IAAIG,CAAC;;;;UAItB;;MAEJ;QAAS;UACLH,KAAK,GAAGF,GAAG;;;IAGnB,IAAIE,KAAK,EAAE;MACPH,GAAG,KAAKA,GAAG,IAAI,GAAG,CAAC;MACnBA,GAAG,IAAIG,KAAK;;;EAGpB,OAAOH,GAAG;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}