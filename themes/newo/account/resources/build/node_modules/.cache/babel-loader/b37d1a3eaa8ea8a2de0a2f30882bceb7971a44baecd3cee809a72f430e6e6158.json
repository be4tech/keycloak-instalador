{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { clsx } from \"../../tools/clsx\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { useGetClassName } from \"../../login/lib/useGetClassName\";\nexport default function Login(props) {\n  const {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    Template,\n    classes\n  } = props;\n  const {\n    getClassName\n  } = useGetClassName({\n    doUseDefaultCss,\n    classes\n  });\n  const {\n    social,\n    realm,\n    url,\n    usernameEditDisabled,\n    login,\n    auth,\n    registrationDisabled\n  } = kcContext;\n  const {\n    msg,\n    msgStr\n  } = i18n;\n  const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n  const onSubmit = useConstCallback(e => {\n    var _a;\n    e.preventDefault();\n    setIsLoginButtonDisabled(true);\n    const formElement = e.target;\n    //NOTE: Even if we login with email Keycloak expect username and password in\n    //the POST request.\n    (_a = formElement.querySelector(\"input[name='email']\")) === null || _a === void 0 ? void 0 : _a.setAttribute(\"name\", \"username\");\n    formElement.submit();\n  });\n  return _jsx(Template, Object.assign({}, {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    classes\n  }, {\n    displayInfo: social.displayInfo,\n    displayWide: realm.password && social.providers !== undefined,\n    headerNode: msg(\"doLogIn\"),\n    infoNode: realm.password && realm.registrationAllowed && !registrationDisabled && _jsx(\"div\", Object.assign({\n      id: \"kc-registration\"\n    }, {\n      children: _jsxs(\"span\", {\n        children: [msg(\"noAccount\"), _jsx(\"a\", Object.assign({\n          tabIndex: 6,\n          href: url.registrationUrl\n        }, {\n          children: msg(\"doRegister\")\n        }))]\n      })\n    }))\n  }, {\n    children: _jsxs(\"div\", Object.assign({\n      id: \"kc-form\",\n      className: clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))\n    }, {\n      children: [_jsx(\"div\", Object.assign({\n        id: \"kc-form-wrapper\",\n        className: clsx(realm.password && social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")])\n      }, {\n        children: realm.password && _jsxs(\"form\", Object.assign({\n          id: \"kc-form-login\",\n          onSubmit: onSubmit,\n          action: url.loginAction,\n          method: \"post\"\n        }, {\n          children: [_jsx(\"div\", Object.assign({\n            className: getClassName(\"kcFormGroupClass\")\n          }, {\n            children: (() => {\n              var _a;\n              const label = !realm.loginWithEmailAllowed ? \"username\" : realm.registrationEmailAsUsername ? \"email\" : \"usernameOrEmail\";\n              const autoCompleteHelper = label === \"usernameOrEmail\" ? \"username\" : label;\n              return _jsxs(_Fragment, {\n                children: [_jsx(\"label\", Object.assign({\n                  htmlFor: autoCompleteHelper,\n                  className: getClassName(\"kcLabelClass\")\n                }, {\n                  children: msg(label)\n                })), _jsx(\"input\", Object.assign({\n                  tabIndex: 1,\n                  id: autoCompleteHelper,\n                  className: getClassName(\"kcInputClass\"),\n                  //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                  //the browser how to pre fill the form but before submit we put it back\n                  //to username because it is what keycloak expects.\n                  name: autoCompleteHelper,\n                  defaultValue: (_a = login.username) !== null && _a !== void 0 ? _a : \"\",\n                  type: \"text\"\n                }, usernameEditDisabled ? {\n                  \"disabled\": true\n                } : {\n                  \"autoFocus\": true,\n                  \"autoComplete\": \"off\"\n                }))]\n              });\n            })()\n          })), _jsxs(\"div\", Object.assign({\n            className: getClassName(\"kcFormGroupClass\")\n          }, {\n            children: [_jsx(\"label\", Object.assign({\n              htmlFor: \"password\",\n              className: getClassName(\"kcLabelClass\")\n            }, {\n              children: msg(\"password\")\n            })), _jsx(\"input\", {\n              tabIndex: 2,\n              id: \"password\",\n              className: getClassName(\"kcInputClass\"),\n              name: \"password\",\n              type: \"password\",\n              autoComplete: \"off\"\n            })]\n          })), _jsxs(\"div\", Object.assign({\n            className: clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))\n          }, {\n            children: [_jsx(\"div\", Object.assign({\n              id: \"kc-form-options\"\n            }, {\n              children: realm.rememberMe && !usernameEditDisabled && _jsx(\"div\", Object.assign({\n                className: \"checkbox\"\n              }, {\n                children: _jsxs(\"label\", {\n                  children: [_jsx(\"input\", Object.assign({\n                    tabIndex: 3,\n                    id: \"rememberMe\",\n                    name: \"rememberMe\",\n                    type: \"checkbox\"\n                  }, login.rememberMe === \"on\" ? {\n                    \"checked\": true\n                  } : {})), msg(\"rememberMe\")]\n                })\n              }))\n            })), _jsx(\"div\", Object.assign({\n              className: getClassName(\"kcFormOptionsWrapperClass\")\n            }, {\n              children: realm.resetPasswordAllowed && _jsx(\"span\", {\n                children: _jsx(\"a\", Object.assign({\n                  tabIndex: 5,\n                  href: url.loginResetCredentialsUrl\n                }, {\n                  children: msg(\"doForgotPassword\")\n                }))\n              })\n            }))]\n          })), _jsxs(\"div\", Object.assign({\n            id: \"kc-form-buttons\",\n            className: getClassName(\"kcFormGroupClass\")\n          }, {\n            children: [_jsx(\"input\", Object.assign({\n              type: \"hidden\",\n              id: \"id-hidden-input\",\n              name: \"credentialId\"\n            }, (auth === null || auth === void 0 ? void 0 : auth.selectedCredential) !== undefined ? {\n              \"value\": auth.selectedCredential\n            } : {})), _jsx(\"input\", {\n              tabIndex: 4,\n              className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonBlockClass\"), getClassName(\"kcButtonLargeClass\")),\n              name: \"login\",\n              id: \"kc-login\",\n              type: \"submit\",\n              value: msgStr(\"doLogIn\"),\n              disabled: isLoginButtonDisabled\n            })]\n          }))]\n        }))\n      })), realm.password && social.providers !== undefined && _jsx(\"div\", Object.assign({\n        id: \"kc-social-providers\",\n        className: clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))\n      }, {\n        children: _jsx(\"ul\", Object.assign({\n          className: clsx(getClassName(\"kcFormSocialAccountListClass\"), social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\"))\n        }, {\n          children: social.providers.map(p => _jsx(\"li\", Object.assign({\n            className: getClassName(\"kcFormSocialAccountListLinkClass\")\n          }, {\n            children: _jsx(\"a\", Object.assign({\n              href: p.loginUrl,\n              id: `zocial-${p.alias}`,\n              className: clsx(\"zocial\", p.providerId)\n            }, {\n              children: _jsx(\"span\", {\n                children: p.displayName\n              })\n            }))\n          }), p.providerId))\n        }))\n      }))]\n    }))\n  }));\n}","map":{"version":3,"names":["useState","clsx","useConstCallback","useGetClassName","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","social","realm","url","usernameEditDisabled","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","e","preventDefault","formElement","target","_a","querySelector","setAttribute","submit","_jsx","Object","assign","displayInfo","displayWide","password","providers","undefined","headerNode","infoNode","registrationAllowed","id","children","_jsxs","tabIndex","href","registrationUrl","className","action","loginAction","method","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","_Fragment","htmlFor","name","defaultValue","username","type","autoComplete","rememberMe","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","alias","providerId","displayName"],"sources":["/Users/user/NewoDev/keycloakify-starter/node_modules/keycloakify/src/login/pages/Login.tsx"],"sourcesContent":["import { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                            social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {(() => {\n                                    const label = !realm.loginWithEmailAllowed\n                                        ? \"username\"\n                                        : realm.registrationEmailAsUsername\n                                        ? \"email\"\n                                        : \"usernameOrEmail\";\n\n                                    const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                    return (\n                                        <>\n                                            <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\n                                                {msg(label)}\n                                            </label>\n                                            <input\n                                                tabIndex={1}\n                                                id={autoCompleteHelper}\n                                                className={getClassName(\"kcInputClass\")}\n                                                //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                //the browser how to pre fill the form but before submit we put it back\n                                                //to username because it is what keycloak expects.\n                                                name={autoCompleteHelper}\n                                                defaultValue={login.username ?? \"\"}\n                                                type=\"text\"\n                                                {...(usernameEditDisabled\n                                                    ? { \"disabled\": true }\n                                                    : {\n                                                          \"autoFocus\": true,\n                                                          \"autoComplete\": \"off\"\n                                                      })}\n                                            />\n                                        </>\n                                    );\n                                })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameEditDisabled && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe === \"on\"\n                                                        ? {\n                                                              \"checked\": true\n                                                          }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                              \"value\": auth.selectedCredential\n                                          }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}