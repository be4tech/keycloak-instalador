{"version":3,"file":"vendors-node_modules_keycloakify_login_lib_useFormValidation_js-node_modules_keycloakify_logi-ea8fe7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACbhUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzCA;AACA;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keycloakify-starter/./node_modules/keycloakify/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/login/lib/useFormValidation.js","webpack://keycloakify-starter/./node_modules/keycloakify/login/lib/useGetClassName.js","webpack://keycloakify-starter/./node_modules/keycloakify/tools/Array.prototype.every.js","webpack://keycloakify-starter/./node_modules/keycloakify/tools/clsx.js","webpack://keycloakify-starter/./node_modules/keycloakify/tools/emailRegExp.js","webpack://keycloakify-starter/./node_modules/tsafe/esm/typeGuard.mjs"],"sourcesContent":["import { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"../tools/useConstCallback\";\nexport function createUseClassName(params) {\n    const { defaultClasses } = params;\n    function useGetClassName(params) {\n        const { classes } = params;\n        const getClassName = useConstCallback((classKey) => {\n            return clsx(classKey, defaultClasses[classKey], classes === null || classes === void 0 ? void 0 : classes[classKey]);\n        });\n        return { getClassName };\n    }\n    return { useGetClassName };\n}\n//# sourceMappingURL=useGetClassName.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport \"../../tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { emailRegexp } from \"../../tools/emailRegExp\";\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params) {\n    const { kcContext, passwordValidators = {\n        \"length\": {\n            \"ignore.empty.value\": true,\n            \"min\": \"4\"\n        }\n    }, i18n } = params;\n    const attributesWithPassword = useMemo(() => !kcContext.passwordRequired\n        ? kcContext.profile.attributes\n        : (() => {\n            const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n            return kcContext.profile.attributes.reduce((prev, curr) => [\n                ...prev,\n                ...(curr.name !== name\n                    ? [curr]\n                    : [\n                        curr,\n                        id({\n                            \"name\": \"password\",\n                            \"displayName\": id(\"${password}\"),\n                            \"required\": true,\n                            \"readOnly\": false,\n                            \"validators\": passwordValidators,\n                            \"annotations\": {},\n                            \"groupAnnotations\": {},\n                            \"autocomplete\": \"new-password\"\n                        }),\n                        id({\n                            \"name\": \"password-confirm\",\n                            \"displayName\": id(\"${passwordConfirm}\"),\n                            \"required\": true,\n                            \"readOnly\": false,\n                            \"validators\": {\n                                \"_compareToOther\": {\n                                    \"name\": \"password\",\n                                    \"ignore.empty.value\": true,\n                                    \"shouldBe\": \"equal\",\n                                    \"error-message\": id(\"${invalidPasswordConfirmMessage}\")\n                                }\n                            },\n                            \"annotations\": {},\n                            \"groupAnnotations\": {},\n                            \"autocomplete\": \"new-password\"\n                        })\n                    ])\n            ], []);\n        })(), [kcContext, passwordValidators]);\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n    const initialInternalState = useMemo(() => Object.fromEntries(attributesWithPassword\n        .map(attribute => ({\n        attribute,\n        \"errors\": getErrors({\n            \"name\": attribute.name,\n            \"fieldValueByAttributeName\": Object.fromEntries(attributesWithPassword.map(({ name, value }) => [name, { \"value\": value !== null && value !== void 0 ? value : \"\" }]))\n        })\n    }))\n        .map(({ attribute, errors }) => {\n        var _a;\n        return [\n            attribute.name,\n            {\n                \"value\": (_a = attribute.value) !== null && _a !== void 0 ? _a : \"\",\n                errors,\n                \"doDisplayPotentialErrorMessages\": errors.length !== 0\n            }\n        ];\n    })), [attributesWithPassword]);\n    const [formValidationInternalState, formValidationDispatch] = useReducer((state, params) => (Object.assign(Object.assign({}, state), { [params.name]: Object.assign(Object.assign({}, state[params.name]), (() => {\n            switch (params.action) {\n                case \"focus lost\":\n                    return { \"doDisplayPotentialErrorMessages\": true };\n                case \"update value\":\n                    return {\n                        \"value\": params.newValue,\n                        \"errors\": getErrors({\n                            \"name\": params.name,\n                            \"fieldValueByAttributeName\": Object.assign(Object.assign({}, state), { [params.name]: { \"value\": params.newValue } })\n                        })\n                    };\n            }\n        })()) })), initialInternalState);\n    const formValidationState = useMemo(() => ({\n        \"fieldStateByAttributeName\": Object.fromEntries(Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n            name,\n            { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n        ])),\n        \"isFormSubmittable\": Object.entries(formValidationInternalState).every(([name, { value, errors }]) => errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name).required))\n    }), [formValidationInternalState, attributesWithPassword]);\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params) {\n    const { kcContext, i18n } = params;\n    const { messagesPerField, profile: { attributes } } = kcContext;\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n    const getErrors = useConstCallback((params) => {\n        var _a;\n        const { name, fieldValueByAttributeName } = params;\n        const { value } = fieldValueByAttributeName[name];\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name);\n        block: {\n            if (defaultValue !== value) {\n                break block;\n            }\n            let doesErrorExist;\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            }\n            catch (_b) {\n                break block;\n            }\n            if (!doesErrorExist) {\n                break block;\n            }\n            const errorMessageStr = messagesPerField.get(name);\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": _jsx(\"span\", { children: errorMessageStr }, 0)\n                }\n            ];\n        }\n        const errors = [];\n        scope: {\n            const validatorName = \"length\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max];\n                errors.push({\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min];\n                errors.push({\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n        scope: {\n            const validatorName = \"_compareToOther\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n            if (isValid) {\n                break scope;\n            }\n            const msgArg = [\n                errorMessageKey !== null && errorMessageKey !== void 0 ? errorMessageKey : id((() => {\n                    switch (shouldBe) {\n                        case \"equal\":\n                            return \"shouldBeEqual\";\n                        case \"different\":\n                            return \"shouldBeDifferent\";\n                    }\n                })()),\n                otherName,\n                name,\n                shouldBe\n            ];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: advancedMsg(...msgArg) }, errors.length),\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n        scope: {\n            const validatorName = \"pattern\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n            const msgArgs = [errorMessageKey !== null && errorMessageKey !== void 0 ? errorMessageKey : id(\"shouldMatchPattern\"), pattern];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: advancedMsg(...msgArgs) }, errors.length),\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n        scope: {\n            if (((_a = [...errors].reverse()[0]) === null || _a === void 0 ? void 0 : _a.validatorName) === \"pattern\") {\n                break scope;\n            }\n            const validatorName = \"email\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n            const msgArgs = [id(\"invalidEmailMessage\")];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n        scope: {\n            const validatorName = \"integer\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            const intValue = parseInt(value);\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"];\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n                break scope;\n            }\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max];\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n                break scope;\n            }\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min];\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n                break scope;\n            }\n        }\n        scope: {\n            const validatorName = \"options\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            if (value === \"\") {\n                break scope;\n            }\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n            const msgArgs = [id(\"notAValidOption\")];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: advancedMsg(...msgArgs) }, errors.length),\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n        //TODO: Implement missing validators.\n        return errors;\n    });\n    return { getErrors };\n}\n//# sourceMappingURL=useFormValidation.js.map","import { createUseClassName } from \"../../lib/useGetClassName\";\nexport const { useGetClassName } = createUseClassName({\n    \"defaultClasses\": {\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n//# sourceMappingURL=useGetClassName.js.map","\"use strict\";\nif (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn, thisArg) {\n        \"use strict\";\n        var T, k;\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0.\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T)\n                    testResult = callbackfn.call(T, kValue, k, O);\n                else\n                    testResult = callbackfn(kValue, k, O);\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n//# sourceMappingURL=Array.prototype.every.js.map","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport const clsx = (...args) => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null)\n            continue;\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                }\n                else {\n                    assert(!typeGuard(arg, false));\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n//# sourceMappingURL=clsx.js.map","export const emailRegexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//# sourceMappingURL=emailRegExp.js.map","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard(_value, isMatched) {\n    return isMatched;\n}\n//# sourceMappingURL=typeGuard.mjs.map"],"names":[],"sourceRoot":""}