{"version":3,"file":"node_modules_keycloakify_login_pages_UpdateUserProfile_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keycloakify-starter/./node_modules/keycloakify/login/pages/UpdateUserProfile.js","webpack://keycloakify-starter/./node_modules/keycloakify/login/pages/shared/UserProfileFormFields.js"],"sourcesContent":["import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { clsx } from \"../../tools/clsx\";\nimport { UserProfileFormFields } from \"../../login/pages/shared/UserProfileFormFields\";\nimport { useGetClassName } from \"../../login/lib/useGetClassName\";\nexport default function UpdateUserProfile(props) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n    const { msg, msgStr } = i18n;\n    const { url, isAppInitiatedAction } = kcContext;\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n    return (_jsx(Template, Object.assign({}, { kcContext, i18n, doUseDefaultCss, classes }, { headerNode: msg(\"loginProfileTitle\") }, { children: _jsxs(\"form\", Object.assign({ id: \"kc-update-profile-form\", className: getClassName(\"kcFormClass\"), action: url.loginAction, method: \"post\" }, { children: [_jsx(UserProfileFormFields, { kcContext: kcContext, onIsFormSubmittableValueChange: setIsFomSubmittable, i18n: i18n, getClassName: getClassName }), _jsxs(\"div\", Object.assign({ className: getClassName(\"kcFormGroupClass\") }, { children: [_jsx(\"div\", Object.assign({ id: \"kc-form-options\", className: getClassName(\"kcFormOptionsClass\") }, { children: _jsx(\"div\", { className: getClassName(\"kcFormOptionsWrapperClass\") }) })), _jsx(\"div\", Object.assign({ id: \"kc-form-buttons\", className: getClassName(\"kcFormButtonsClass\") }, { children: isAppInitiatedAction ? (_jsxs(_Fragment, { children: [_jsx(\"input\", { className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonLargeClass\")), type: \"submit\", value: msgStr(\"doSubmit\") }), _jsx(\"button\", Object.assign({ className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonDefaultClass\"), getClassName(\"kcButtonLargeClass\")), type: \"submit\", name: \"cancel-aia\", value: \"true\", formNoValidate: true }, { children: msg(\"doCancel\") }))] })) : (_jsx(\"input\", { className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonBlockClass\"), getClassName(\"kcButtonLargeClass\")), type: \"submit\", defaultValue: msgStr(\"doSubmit\"), disabled: !isFomSubmittable })) }))] }))] })) })));\n}\n//# sourceMappingURL=UpdateUserProfile.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, Fragment } from \"react\";\nimport { clsx } from \"../../../tools/clsx\";\nimport { useFormValidation } from \"../../../login/lib/useFormValidation\";\nexport function UserProfileFormFields(props) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n    const { advancedMsg, msg } = i18n;\n    const { formValidationState: { fieldStateByAttributeName, isFormSubmittable }, formValidationDispatch, attributesWithPassword } = useFormValidation({\n        kcContext,\n        i18n\n    });\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n    let currentGroup = \"\";\n    return (_jsx(_Fragment, { children: attributesWithPassword.map((attribute, i) => {\n            var _a;\n            const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n            const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n            const formGroupClassName = clsx(getClassName(\"kcFormGroupClass\"), displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\"));\n            return (_jsxs(Fragment, { children: [group !== currentGroup && (currentGroup = group) !== \"\" && (_jsxs(\"div\", Object.assign({ className: formGroupClassName }, { children: [_jsx(\"div\", Object.assign({ className: getClassName(\"kcContentWrapperClass\") }, { children: _jsx(\"label\", Object.assign({ id: `header-${group}`, className: getClassName(\"kcFormGroupHeader\") }, { children: advancedMsg(groupDisplayHeader) || currentGroup })) })), groupDisplayDescription !== \"\" && (_jsx(\"div\", Object.assign({ className: getClassName(\"kcLabelWrapperClass\") }, { children: _jsx(\"label\", Object.assign({ id: `description-${group}`, className: getClassName(\"kcLabelClass\") }, { children: advancedMsg(groupDisplayDescription) })) })))] }))), BeforeField && _jsx(BeforeField, { attribute: attribute }), _jsxs(\"div\", Object.assign({ className: formGroupClassName }, { children: [_jsxs(\"div\", Object.assign({ className: getClassName(\"kcLabelWrapperClass\") }, { children: [_jsx(\"label\", Object.assign({ htmlFor: attribute.name, className: getClassName(\"kcLabelClass\") }, { children: advancedMsg((_a = attribute.displayName) !== null && _a !== void 0 ? _a : \"\") })), attribute.required && _jsx(_Fragment, { children: \"*\" })] })), _jsxs(\"div\", Object.assign({ className: getClassName(\"kcInputWrapperClass\") }, { children: [(() => {\n                                        const { options } = attribute.validators;\n                                        if (options !== undefined) {\n                                            return (_jsx(\"select\", Object.assign({ id: attribute.name, name: attribute.name, onChange: event => formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                }), onBlur: () => formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                }), value: value }, { children: _jsxs(_Fragment, { children: [_jsx(\"option\", Object.assign({ value: \"\", selected: true, disabled: true, hidden: true }, { children: msg(\"selectAnOption\") })), options.options.map(option => (_jsx(\"option\", Object.assign({ value: option }, { children: option }), option)))] }) })));\n                                        }\n                                        return (_jsx(\"input\", { type: (() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })(), id: attribute.name, name: attribute.name, value: value, onChange: event => formValidationDispatch({\n                                                \"action\": \"update value\",\n                                                \"name\": attribute.name,\n                                                \"newValue\": event.target.value\n                                            }), onBlur: () => formValidationDispatch({\n                                                \"action\": \"focus lost\",\n                                                \"name\": attribute.name\n                                            }), className: getClassName(\"kcInputClass\"), \"aria-invalid\": displayableErrors.length !== 0, disabled: attribute.readOnly, autoComplete: attribute.autocomplete }));\n                                    })(), displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n                                            return (_jsxs(_Fragment, { children: [_jsx(\"style\", { children: `#${divId} > span: { display: block; }` }), _jsx(\"span\", Object.assign({ id: divId, className: getClassName(\"kcInputErrorMessageClass\"), style: {\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }, \"aria-live\": \"polite\" }, { children: displayableErrors.map(({ errorMessage }) => errorMessage) }))] }));\n                                        })()] }))] })), AfterField && _jsx(AfterField, { attribute: attribute })] }, i));\n        }) }));\n}\n//# sourceMappingURL=UserProfileFormFields.js.map"],"names":[],"sourceRoot":""}